
LAB3_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000586c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005a44  08005a44  00015a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a84  08005a84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a84  08005a84  00015a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a8c  08005a8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a8c  08005a8c  00015a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a90  08005a90  00015a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000010  08005aa0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08005aa0  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f58d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002080  00000000  00000000  0002f60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c28  00000000  00000000  00031690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000966  00000000  00000000  000322b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024660  00000000  00000000  00032c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000edf6  00000000  00000000  0005727e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7e3c  00000000  00000000  00066074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031b4  00000000  00000000  0014deb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00151064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005a2c 	.word	0x08005a2c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08005a2c 	.word	0x08005a2c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fc3c 	bl	8000d96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f867 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f96d 	bl	8000800 <MX_GPIO_Init>
  MX_DMA_Init();
 8000526:	f000 f939 	bl	800079c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800052a:	f000 f8ad 	bl	8000688 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 800052e:	f000 f8f7 	bl	8000720 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	UART_Receive();
 8000532:	f000 f9f5 	bl	8000920 <UART_Receive>
	SPITxRx_Setup();
 8000536:	f000 fa17 	bl	8000968 <SPITxRx_Setup>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (time + 1000 >= HAL_GetTick()) {
 800053a:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <main+0xc4>)
 800053c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000540:	f512 747a 	adds.w	r4, r2, #1000	; 0x3e8
 8000544:	f143 0500 	adc.w	r5, r3, #0
 8000548:	f000 fc8a 	bl	8000e60 <HAL_GetTick>
 800054c:	4603      	mov	r3, r0
 800054e:	2200      	movs	r2, #0
 8000550:	4698      	mov	r8, r3
 8000552:	4691      	mov	r9, r2
 8000554:	4544      	cmp	r4, r8
 8000556:	eb75 0309 	sbcs.w	r3, r5, r9
 800055a:	d3ee      	bcc.n	800053a <main+0x26>
			SPITxRx_readIO();
 800055c:	f000 fa1a 	bl	8000994 <SPITxRx_readIO>
			if (SPIRx[2] == 2) {
 8000560:	4b1e      	ldr	r3, [pc, #120]	; (80005dc <main+0xc8>)
 8000562:	789b      	ldrb	r3, [r3, #2]
 8000564:	2b02      	cmp	r3, #2
 8000566:	d105      	bne.n	8000574 <main+0x60>
				mouse_x = 100;
 8000568:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <main+0xcc>)
 800056a:	2264      	movs	r2, #100	; 0x64
 800056c:	701a      	strb	r2, [r3, #0]
				mouse_y = 150;
 800056e:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <main+0xd0>)
 8000570:	2296      	movs	r2, #150	; 0x96
 8000572:	701a      	strb	r2, [r3, #0]
			}
			if (SPIRx[2] == 1) {
 8000574:	4b19      	ldr	r3, [pc, #100]	; (80005dc <main+0xc8>)
 8000576:	789b      	ldrb	r3, [r3, #2]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d105      	bne.n	8000588 <main+0x74>
				mouse_x = 250;
 800057c:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <main+0xcc>)
 800057e:	22fa      	movs	r2, #250	; 0xfa
 8000580:	701a      	strb	r2, [r3, #0]
				mouse_y = 150;
 8000582:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <main+0xd0>)
 8000584:	2296      	movs	r2, #150	; 0x96
 8000586:	701a      	strb	r2, [r3, #0]
			}
			if (SPIRx[2] == 3) {
 8000588:	4b14      	ldr	r3, [pc, #80]	; (80005dc <main+0xc8>)
 800058a:	789b      	ldrb	r3, [r3, #2]
 800058c:	2b03      	cmp	r3, #3
 800058e:	d105      	bne.n	800059c <main+0x88>
				mouse_x = 0;
 8000590:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <main+0xcc>)
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
				mouse_y = 0;
 8000596:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <main+0xd0>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
			}
			TxBuffer[0] = 20;
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <main+0xd4>)
 800059e:	2214      	movs	r2, #20
 80005a0:	701a      	strb	r2, [r3, #0]
			TxBuffer[1] = mouse_x;
 80005a2:	4b0f      	ldr	r3, [pc, #60]	; (80005e0 <main+0xcc>)
 80005a4:	781a      	ldrb	r2, [r3, #0]
 80005a6:	4b10      	ldr	r3, [pc, #64]	; (80005e8 <main+0xd4>)
 80005a8:	705a      	strb	r2, [r3, #1]
			TxBuffer[2] = mouse_y;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <main+0xd0>)
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <main+0xd4>)
 80005b0:	709a      	strb	r2, [r3, #2]
			TxBuffer[3] = '\n';
 80005b2:	4b0d      	ldr	r3, [pc, #52]	; (80005e8 <main+0xd4>)
 80005b4:	220a      	movs	r2, #10
 80005b6:	70da      	strb	r2, [r3, #3]
			//
			HAL_UART_Transmit_IT(&hlpuart1, TxBuffer, 4);
 80005b8:	2204      	movs	r2, #4
 80005ba:	490b      	ldr	r1, [pc, #44]	; (80005e8 <main+0xd4>)
 80005bc:	480b      	ldr	r0, [pc, #44]	; (80005ec <main+0xd8>)
 80005be:	f002 ff85 	bl	80034cc <HAL_UART_Transmit_IT>
			time = HAL_GetTick();
 80005c2:	f000 fc4d 	bl	8000e60 <HAL_GetTick>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2200      	movs	r2, #0
 80005ca:	469a      	mov	sl, r3
 80005cc:	4693      	mov	fp, r2
 80005ce:	4b02      	ldr	r3, [pc, #8]	; (80005d8 <main+0xc4>)
 80005d0:	e9c3 ab00 	strd	sl, fp, [r3]
		if (time + 1000 >= HAL_GetTick()) {
 80005d4:	e7b1      	b.n	800053a <main+0x26>
 80005d6:	bf00      	nop
 80005d8:	20000208 	.word	0x20000208
 80005dc:	200001e4 	.word	0x200001e4
 80005e0:	20000204 	.word	0x20000204
 80005e4:	20000205 	.word	0x20000205
 80005e8:	20000200 	.word	0x20000200
 80005ec:	2000002c 	.word	0x2000002c

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	2238      	movs	r2, #56	; 0x38
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f005 f9e8 	bl	80059d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000612:	2000      	movs	r0, #0
 8000614:	f001 f9b2 	bl	800197c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000622:	2340      	movs	r3, #64	; 0x40
 8000624:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800062e:	2304      	movs	r3, #4
 8000630:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000632:	2355      	movs	r3, #85	; 0x55
 8000634:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 0318 	add.w	r3, r7, #24
 8000646:	4618      	mov	r0, r3
 8000648:	f001 fa4c 	bl	8001ae4 <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000652:	f000 f9d9 	bl	8000a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	230f      	movs	r3, #15
 8000658:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065a:	2303      	movs	r3, #3
 800065c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2104      	movs	r1, #4
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fd4a 	bl	8002108 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800067a:	f000 f9c5 	bl	8000a08 <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	; 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800068c:	4b22      	ldr	r3, [pc, #136]	; (8000718 <MX_LPUART1_UART_Init+0x90>)
 800068e:	4a23      	ldr	r2, [pc, #140]	; (800071c <MX_LPUART1_UART_Init+0x94>)
 8000690:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <MX_LPUART1_UART_Init+0x90>)
 8000694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000698:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_9B;
 800069a:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <MX_LPUART1_UART_Init+0x90>)
 800069c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006a0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006a2:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <MX_LPUART1_UART_Init+0x90>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_EVEN;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MX_LPUART1_UART_Init+0x90>)
 80006aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ae:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <MX_LPUART1_UART_Init+0x90>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_LPUART1_UART_Init+0x90>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_LPUART1_UART_Init+0x90>)
 80006be:	2200      	movs	r2, #0
 80006c0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_LPUART1_UART_Init+0x90>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c8:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_LPUART1_UART_Init+0x90>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006ce:	4812      	ldr	r0, [pc, #72]	; (8000718 <MX_LPUART1_UART_Init+0x90>)
 80006d0:	f002 feac 	bl	800342c <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80006da:	f000 f995 	bl	8000a08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006de:	2100      	movs	r1, #0
 80006e0:	480d      	ldr	r0, [pc, #52]	; (8000718 <MX_LPUART1_UART_Init+0x90>)
 80006e2:	f005 f8ac 	bl	800583e <HAL_UARTEx_SetTxFifoThreshold>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80006ec:	f000 f98c 	bl	8000a08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f0:	2100      	movs	r1, #0
 80006f2:	4809      	ldr	r0, [pc, #36]	; (8000718 <MX_LPUART1_UART_Init+0x90>)
 80006f4:	f005 f8e1 	bl	80058ba <HAL_UARTEx_SetRxFifoThreshold>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80006fe:	f000 f983 	bl	8000a08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_LPUART1_UART_Init+0x90>)
 8000704:	f005 f862 	bl	80057cc <HAL_UARTEx_DisableFifoMode>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800070e:	f000 f97b 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	2000002c 	.word	0x2000002c
 800071c:	40008000 	.word	0x40008000

08000720 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_SPI3_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <MX_SPI3_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_SPI3_Init+0x74>)
 800072c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000730:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_SPI3_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_SPI3_Init+0x74>)
 800073a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800073e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_SPI3_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_SPI3_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_SPI3_Init+0x74>)
 800074e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000752:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_SPI3_Init+0x74>)
 8000756:	2238      	movs	r2, #56	; 0x38
 8000758:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_SPI3_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_SPI3_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_SPI3_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_SPI3_Init+0x74>)
 800076e:	2207      	movs	r2, #7
 8000770:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_SPI3_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_SPI3_Init+0x74>)
 800077a:	2208      	movs	r2, #8
 800077c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_SPI3_Init+0x74>)
 8000780:	f002 f92c 	bl	80029dc <HAL_SPI_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 f93d 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000180 	.word	0x20000180
 8000798:	40003c00 	.word	0x40003c00

0800079c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_DMA_Init+0x60>)
 80007a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007a6:	4a15      	ldr	r2, [pc, #84]	; (80007fc <MX_DMA_Init+0x60>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	6493      	str	r3, [r2, #72]	; 0x48
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_DMA_Init+0x60>)
 80007b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_DMA_Init+0x60>)
 80007bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007be:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <MX_DMA_Init+0x60>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6493      	str	r3, [r2, #72]	; 0x48
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_DMA_Init+0x60>)
 80007c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	200b      	movs	r0, #11
 80007d8:	f000 fc4b 	bl	8001072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007dc:	200b      	movs	r0, #11
 80007de:	f000 fc62 	bl	80010a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	200c      	movs	r0, #12
 80007e8:	f000 fc43 	bl	8001072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007ec:	200c      	movs	r0, #12
 80007ee:	f000 fc5a 	bl	80010a6 <HAL_NVIC_EnableIRQ>

}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b3f      	ldr	r3, [pc, #252]	; (8000914 <MX_GPIO_Init+0x114>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a3e      	ldr	r2, [pc, #248]	; (8000914 <MX_GPIO_Init+0x114>)
 800081c:	f043 0304 	orr.w	r3, r3, #4
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b3c      	ldr	r3, [pc, #240]	; (8000914 <MX_GPIO_Init+0x114>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800082e:	4b39      	ldr	r3, [pc, #228]	; (8000914 <MX_GPIO_Init+0x114>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4a38      	ldr	r2, [pc, #224]	; (8000914 <MX_GPIO_Init+0x114>)
 8000834:	f043 0320 	orr.w	r3, r3, #32
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4b36      	ldr	r3, [pc, #216]	; (8000914 <MX_GPIO_Init+0x114>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0320 	and.w	r3, r3, #32
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	4b33      	ldr	r3, [pc, #204]	; (8000914 <MX_GPIO_Init+0x114>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a32      	ldr	r2, [pc, #200]	; (8000914 <MX_GPIO_Init+0x114>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b30      	ldr	r3, [pc, #192]	; (8000914 <MX_GPIO_Init+0x114>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <MX_GPIO_Init+0x114>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a2c      	ldr	r2, [pc, #176]	; (8000914 <MX_GPIO_Init+0x114>)
 8000864:	f043 0308 	orr.w	r3, r3, #8
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b2a      	ldr	r3, [pc, #168]	; (8000914 <MX_GPIO_Init+0x114>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0308 	and.w	r3, r3, #8
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b27      	ldr	r3, [pc, #156]	; (8000914 <MX_GPIO_Init+0x114>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4a26      	ldr	r2, [pc, #152]	; (8000914 <MX_GPIO_Init+0x114>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4b24      	ldr	r3, [pc, #144]	; (8000914 <MX_GPIO_Init+0x114>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2120      	movs	r1, #32
 8000892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000896:	f001 f835 	bl	8001904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800089a:	2201      	movs	r2, #1
 800089c:	2104      	movs	r1, #4
 800089e:	481e      	ldr	r0, [pc, #120]	; (8000918 <MX_GPIO_Init+0x118>)
 80008a0:	f001 f830 	bl	8001904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4818      	ldr	r0, [pc, #96]	; (800091c <MX_GPIO_Init+0x11c>)
 80008bc:	f000 fe88 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008c0:	2320      	movs	r3, #32
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f000 fe79 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008de:	2304      	movs	r3, #4
 80008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e2:	2301      	movs	r3, #1
 80008e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	4808      	ldr	r0, [pc, #32]	; (8000918 <MX_GPIO_Init+0x118>)
 80008f6:	f000 fe6b 	bl	80015d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	2028      	movs	r0, #40	; 0x28
 8000900:	f000 fbb7 	bl	8001072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000904:	2028      	movs	r0, #40	; 0x28
 8000906:	f000 fbce 	bl	80010a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	; 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000
 8000918:	48000c00 	.word	0x48000c00
 800091c:	48000800 	.word	0x48000800

08000920 <UART_Receive>:

/* USER CODE BEGIN 4 */
void UART_Receive() {
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 3);
 8000924:	2203      	movs	r2, #3
 8000926:	4903      	ldr	r1, [pc, #12]	; (8000934 <UART_Receive+0x14>)
 8000928:	4803      	ldr	r0, [pc, #12]	; (8000938 <UART_Receive+0x18>)
 800092a:	f002 fe63 	bl	80035f4 <HAL_UART_Receive_IT>
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200001fc 	.word	0x200001fc
 8000938:	2000002c 	.word	0x2000002c

0800093c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	if (huart == &hlpuart1) {
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a06      	ldr	r2, [pc, #24]	; (8000960 <HAL_UART_RxCpltCallback+0x24>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d104      	bne.n	8000956 <HAL_UART_RxCpltCallback+0x1a>
		if (RxBuffer[0] == 20) {

		}
		HAL_UART_Receive_IT(&hlpuart1, RxBuffer, 4);
 800094c:	2204      	movs	r2, #4
 800094e:	4905      	ldr	r1, [pc, #20]	; (8000964 <HAL_UART_RxCpltCallback+0x28>)
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <HAL_UART_RxCpltCallback+0x24>)
 8000952:	f002 fe4f 	bl	80035f4 <HAL_UART_Receive_IT>
	}
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000002c 	.word	0x2000002c
 8000964:	200001fc 	.word	0x200001fc

08000968 <SPITxRx_Setup>:
void SPITxRx_Setup() {
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
//CS pulse
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 800096c:	2200      	movs	r2, #0
 800096e:	2104      	movs	r1, #4
 8000970:	4807      	ldr	r0, [pc, #28]	; (8000990 <SPITxRx_Setup+0x28>)
 8000972:	f000 ffc7 	bl	8001904 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000976:	2001      	movs	r0, #1
 8000978:	f000 fa7e 	bl	8000e78 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
 800097c:	2201      	movs	r2, #1
 800097e:	2104      	movs	r1, #4
 8000980:	4803      	ldr	r0, [pc, #12]	; (8000990 <SPITxRx_Setup+0x28>)
 8000982:	f000 ffbf 	bl	8001904 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000986:	2001      	movs	r0, #1
 8000988:	f000 fa76 	bl	8000e78 <HAL_Delay>
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	48000c00 	.word	0x48000c00

08000994 <SPITxRx_readIO>:
void SPITxRx_readIO() {
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2)) {
 8000998:	2104      	movs	r1, #4
 800099a:	480f      	ldr	r0, [pc, #60]	; (80009d8 <SPITxRx_readIO+0x44>)
 800099c:	f000 ff9a 	bl	80018d4 <HAL_GPIO_ReadPin>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d016      	beq.n	80009d4 <SPITxRx_readIO+0x40>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 80009a6:	2200      	movs	r2, #0
 80009a8:	2104      	movs	r1, #4
 80009aa:	480b      	ldr	r0, [pc, #44]	; (80009d8 <SPITxRx_readIO+0x44>)
 80009ac:	f000 ffaa 	bl	8001904 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000001;
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <SPITxRx_readIO+0x48>)
 80009b2:	2241      	movs	r2, #65	; 0x41
 80009b4:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x12;
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <SPITxRx_readIO+0x48>)
 80009b8:	2212      	movs	r2, #18
 80009ba:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0;
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <SPITxRx_readIO+0x48>)
 80009be:	2200      	movs	r2, #0
 80009c0:	709a      	strb	r2, [r3, #2]
		SPITx[3] = 0;
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <SPITxRx_readIO+0x48>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	70da      	strb	r2, [r3, #3]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 80009c8:	2304      	movs	r3, #4
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <SPITxRx_readIO+0x4c>)
 80009cc:	4903      	ldr	r1, [pc, #12]	; (80009dc <SPITxRx_readIO+0x48>)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <SPITxRx_readIO+0x50>)
 80009d0:	f002 f8b0 	bl	8002b34 <HAL_SPI_TransmitReceive_IT>
	}
}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	48000c00 	.word	0x48000c00
 80009dc:	200001f0 	.word	0x200001f0
 80009e0:	200001e4 	.word	0x200001e4
 80009e4:	20000180 	.word	0x20000180

080009e8 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 80009f0:	2201      	movs	r2, #1
 80009f2:	2104      	movs	r1, #4
 80009f4:	4803      	ldr	r0, [pc, #12]	; (8000a04 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80009f6:	f000 ff85 	bl	8001904 <HAL_GPIO_WritePin>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	48000c00 	.word	0x48000c00

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0c:	b672      	cpsid	i
}
 8000a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a10:	e7fe      	b.n	8000a10 <Error_Handler+0x8>
	...

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <HAL_MspInit+0x44>)
 8000a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <HAL_MspInit+0x44>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6613      	str	r3, [r2, #96]	; 0x60
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <HAL_MspInit+0x44>)
 8000a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_MspInit+0x44>)
 8000a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <HAL_MspInit+0x44>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_MspInit+0x44>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a4a:	f001 f83b 	bl	8001ac4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40021000 	.word	0x40021000

08000a5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b09e      	sub	sp, #120	; 0x78
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	2254      	movs	r2, #84	; 0x54
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f004 ffa9 	bl	80059d4 <memset>
  if(huart->Instance==LPUART1)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a4d      	ldr	r2, [pc, #308]	; (8000bbc <HAL_UART_MspInit+0x160>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	f040 8092 	bne.w	8000bb2 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a8e:	2320      	movs	r3, #32
 8000a90:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a96:	f107 0310 	add.w	r3, r7, #16
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 fd50 	bl	8002540 <HAL_RCCEx_PeriphCLKConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000aa6:	f7ff ffaf 	bl	8000a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000aaa:	4b45      	ldr	r3, [pc, #276]	; (8000bc0 <HAL_UART_MspInit+0x164>)
 8000aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aae:	4a44      	ldr	r2, [pc, #272]	; (8000bc0 <HAL_UART_MspInit+0x164>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ab6:	4b42      	ldr	r3, [pc, #264]	; (8000bc0 <HAL_UART_MspInit+0x164>)
 8000ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4b3f      	ldr	r3, [pc, #252]	; (8000bc0 <HAL_UART_MspInit+0x164>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	4a3e      	ldr	r2, [pc, #248]	; (8000bc0 <HAL_UART_MspInit+0x164>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ace:	4b3c      	ldr	r3, [pc, #240]	; (8000bc0 <HAL_UART_MspInit+0x164>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000ada:	230c      	movs	r3, #12
 8000adc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000aea:	230c      	movs	r3, #12
 8000aec:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000af2:	4619      	mov	r1, r3
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af8:	f000 fd6a 	bl	80015d0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000afc:	4b31      	ldr	r3, [pc, #196]	; (8000bc4 <HAL_UART_MspInit+0x168>)
 8000afe:	4a32      	ldr	r2, [pc, #200]	; (8000bc8 <HAL_UART_MspInit+0x16c>)
 8000b00:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000b02:	4b30      	ldr	r3, [pc, #192]	; (8000bc4 <HAL_UART_MspInit+0x168>)
 8000b04:	2222      	movs	r2, #34	; 0x22
 8000b06:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b08:	4b2e      	ldr	r3, [pc, #184]	; (8000bc4 <HAL_UART_MspInit+0x168>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b0e:	4b2d      	ldr	r3, [pc, #180]	; (8000bc4 <HAL_UART_MspInit+0x168>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b14:	4b2b      	ldr	r3, [pc, #172]	; (8000bc4 <HAL_UART_MspInit+0x168>)
 8000b16:	2280      	movs	r2, #128	; 0x80
 8000b18:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b1a:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <HAL_UART_MspInit+0x168>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b20:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <HAL_UART_MspInit+0x168>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000b26:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <HAL_UART_MspInit+0x168>)
 8000b28:	2220      	movs	r2, #32
 8000b2a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b2c:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <HAL_UART_MspInit+0x168>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000b32:	4824      	ldr	r0, [pc, #144]	; (8000bc4 <HAL_UART_MspInit+0x168>)
 8000b34:	f000 fad2 	bl	80010dc <HAL_DMA_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000b3e:	f7ff ff63 	bl	8000a08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a1f      	ldr	r2, [pc, #124]	; (8000bc4 <HAL_UART_MspInit+0x168>)
 8000b46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000b4a:	4a1e      	ldr	r2, [pc, #120]	; (8000bc4 <HAL_UART_MspInit+0x168>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000b50:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <HAL_UART_MspInit+0x170>)
 8000b52:	4a1f      	ldr	r2, [pc, #124]	; (8000bd0 <HAL_UART_MspInit+0x174>)
 8000b54:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000b56:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <HAL_UART_MspInit+0x170>)
 8000b58:	2223      	movs	r2, #35	; 0x23
 8000b5a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <HAL_UART_MspInit+0x170>)
 8000b5e:	2210      	movs	r2, #16
 8000b60:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <HAL_UART_MspInit+0x170>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <HAL_UART_MspInit+0x170>)
 8000b6a:	2280      	movs	r2, #128	; 0x80
 8000b6c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <HAL_UART_MspInit+0x170>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b74:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <HAL_UART_MspInit+0x170>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_CIRCULAR;
 8000b7a:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <HAL_UART_MspInit+0x170>)
 8000b7c:	2220      	movs	r2, #32
 8000b7e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_UART_MspInit+0x170>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000b86:	4811      	ldr	r0, [pc, #68]	; (8000bcc <HAL_UART_MspInit+0x170>)
 8000b88:	f000 faa8 	bl	80010dc <HAL_DMA_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000b92:	f7ff ff39 	bl	8000a08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a0c      	ldr	r2, [pc, #48]	; (8000bcc <HAL_UART_MspInit+0x170>)
 8000b9a:	67da      	str	r2, [r3, #124]	; 0x7c
 8000b9c:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <HAL_UART_MspInit+0x170>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	205b      	movs	r0, #91	; 0x5b
 8000ba8:	f000 fa63 	bl	8001072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000bac:	205b      	movs	r0, #91	; 0x5b
 8000bae:	f000 fa7a 	bl	80010a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3778      	adds	r7, #120	; 0x78
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40008000 	.word	0x40008000
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	200000c0 	.word	0x200000c0
 8000bc8:	40020008 	.word	0x40020008
 8000bcc:	20000120 	.word	0x20000120
 8000bd0:	4002001c 	.word	0x4002001c

08000bd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	; 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <HAL_SPI_MspInit+0x8c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d130      	bne.n	8000c58 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <HAL_SPI_MspInit+0x90>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfa:	4a1a      	ldr	r2, [pc, #104]	; (8000c64 <HAL_SPI_MspInit+0x90>)
 8000bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c00:	6593      	str	r3, [r2, #88]	; 0x58
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <HAL_SPI_MspInit+0x90>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_SPI_MspInit+0x90>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <HAL_SPI_MspInit+0x90>)
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1a:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_SPI_MspInit+0x90>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000c26:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c38:	2306      	movs	r3, #6
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	4809      	ldr	r0, [pc, #36]	; (8000c68 <HAL_SPI_MspInit+0x94>)
 8000c44:	f000 fcc4 	bl	80015d0 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2033      	movs	r0, #51	; 0x33
 8000c4e:	f000 fa10 	bl	8001072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000c52:	2033      	movs	r0, #51	; 0x33
 8000c54:	f000 fa27 	bl	80010a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40003c00 	.word	0x40003c00
 8000c64:	40021000 	.word	0x40021000
 8000c68:	48000800 	.word	0x48000800

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c70:	e7fe      	b.n	8000c70 <NMI_Handler+0x4>

08000c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <MemManage_Handler+0x4>

08000c7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb8:	f000 f8c0 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <DMA1_Channel1_IRQHandler+0x10>)
 8000cc6:	f000 fb71 	bl	80013ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000c0 	.word	0x200000c0

08000cd4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <DMA1_Channel2_IRQHandler+0x10>)
 8000cda:	f000 fb67 	bl	80013ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000120 	.word	0x20000120

08000ce8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cf0:	f000 fe20 	bl	8001934 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <SPI3_IRQHandler+0x10>)
 8000cfe:	f001 ffc7 	bl	8002c90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000180 	.word	0x20000180

08000d0c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <LPUART1_IRQHandler+0x10>)
 8000d12:	f002 fcbb 	bl	800368c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2000002c 	.word	0x2000002c

08000d20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <SystemInit+0x20>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <SystemInit+0x20>)
 8000d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d48:	f7ff ffea 	bl	8000d20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d4e:	490d      	ldr	r1, [pc, #52]	; (8000d84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <LoopForever+0xe>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d64:	4c0a      	ldr	r4, [pc, #40]	; (8000d90 <LoopForever+0x16>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d72:	f004 fe37 	bl	80059e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d76:	f7ff fbcd 	bl	8000514 <main>

08000d7a <LoopForever>:

LoopForever:
    b LoopForever
 8000d7a:	e7fe      	b.n	8000d7a <LoopForever>
  ldr   r0, =_estack
 8000d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d88:	08005a94 	.word	0x08005a94
  ldr r2, =_sbss
 8000d8c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d90:	20000214 	.word	0x20000214

08000d94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC1_2_IRQHandler>

08000d96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da0:	2003      	movs	r0, #3
 8000da2:	f000 f95b 	bl	800105c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000da6:	2000      	movs	r0, #0
 8000da8:	f000 f80e 	bl	8000dc8 <HAL_InitTick>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d002      	beq.n	8000db8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	71fb      	strb	r3, [r7, #7]
 8000db6:	e001      	b.n	8000dbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000db8:	f7ff fe2c 	bl	8000a14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dbc:	79fb      	ldrb	r3, [r7, #7]

}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <HAL_InitTick+0x68>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d022      	beq.n	8000e22 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <HAL_InitTick+0x6c>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <HAL_InitTick+0x68>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000de8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 f966 	bl	80010c2 <HAL_SYSTICK_Config>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d10f      	bne.n	8000e1c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b0f      	cmp	r3, #15
 8000e00:	d809      	bhi.n	8000e16 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e02:	2200      	movs	r2, #0
 8000e04:	6879      	ldr	r1, [r7, #4]
 8000e06:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0a:	f000 f932 	bl	8001072 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <HAL_InitTick+0x70>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6013      	str	r3, [r2, #0]
 8000e14:	e007      	b.n	8000e26 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	73fb      	strb	r3, [r7, #15]
 8000e1a:	e004      	b.n	8000e26 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	e001      	b.n	8000e26 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000000 	.word	0x20000000
 8000e38:	20000004 	.word	0x20000004

08000e3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_IncTick+0x1c>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <HAL_IncTick+0x20>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a03      	ldr	r2, [pc, #12]	; (8000e58 <HAL_IncTick+0x1c>)
 8000e4c:	6013      	str	r3, [r2, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	20000210 	.word	0x20000210
 8000e5c:	20000008 	.word	0x20000008

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <HAL_GetTick+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000210 	.word	0x20000210

08000e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e80:	f7ff ffee 	bl	8000e60 <HAL_GetTick>
 8000e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e90:	d004      	beq.n	8000e9c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <HAL_Delay+0x40>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	4413      	add	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9c:	bf00      	nop
 8000e9e:	f7ff ffdf 	bl	8000e60 <HAL_GetTick>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	68fa      	ldr	r2, [r7, #12]
 8000eaa:	429a      	cmp	r2, r3
 8000eac:	d8f7      	bhi.n	8000e9e <HAL_Delay+0x26>
  {
  }
}
 8000eae:	bf00      	nop
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000008 	.word	0x20000008

08000ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eee:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	60d3      	str	r3, [r2, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <__NVIC_GetPriorityGrouping+0x18>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	f003 0307 	and.w	r3, r3, #7
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db0b      	blt.n	8000f4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f003 021f 	and.w	r2, r3, #31
 8000f38:	4907      	ldr	r1, [pc, #28]	; (8000f58 <__NVIC_EnableIRQ+0x38>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	095b      	lsrs	r3, r3, #5
 8000f40:	2001      	movs	r0, #1
 8000f42:	fa00 f202 	lsl.w	r2, r0, r2
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000e100 	.word	0xe000e100

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	; (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001028:	d301      	bcc.n	800102e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102a:	2301      	movs	r3, #1
 800102c:	e00f      	b.n	800104e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <SysTick_Config+0x40>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001036:	210f      	movs	r1, #15
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f7ff ff8e 	bl	8000f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <SysTick_Config+0x40>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <SysTick_Config+0x40>)
 8001048:	2207      	movs	r2, #7
 800104a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010

0800105c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff29 	bl	8000ebc <__NVIC_SetPriorityGrouping>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001080:	f7ff ff40 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 8001084:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	68b9      	ldr	r1, [r7, #8]
 800108a:	6978      	ldr	r0, [r7, #20]
 800108c:	f7ff ff90 	bl	8000fb0 <NVIC_EncodePriority>
 8001090:	4602      	mov	r2, r0
 8001092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001096:	4611      	mov	r1, r2
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff5f 	bl	8000f5c <__NVIC_SetPriority>
}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff33 	bl	8000f20 <__NVIC_EnableIRQ>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffa4 	bl	8001018 <SysTick_Config>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e08d      	b.n	800120a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b47      	ldr	r3, [pc, #284]	; (8001214 <HAL_DMA_Init+0x138>)
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d80f      	bhi.n	800111a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	4b45      	ldr	r3, [pc, #276]	; (8001218 <HAL_DMA_Init+0x13c>)
 8001102:	4413      	add	r3, r2
 8001104:	4a45      	ldr	r2, [pc, #276]	; (800121c <HAL_DMA_Init+0x140>)
 8001106:	fba2 2303 	umull	r2, r3, r2, r3
 800110a:	091b      	lsrs	r3, r3, #4
 800110c:	009a      	lsls	r2, r3, #2
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a42      	ldr	r2, [pc, #264]	; (8001220 <HAL_DMA_Init+0x144>)
 8001116:	641a      	str	r2, [r3, #64]	; 0x40
 8001118:	e00e      	b.n	8001138 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	4b40      	ldr	r3, [pc, #256]	; (8001224 <HAL_DMA_Init+0x148>)
 8001122:	4413      	add	r3, r2
 8001124:	4a3d      	ldr	r2, [pc, #244]	; (800121c <HAL_DMA_Init+0x140>)
 8001126:	fba2 2303 	umull	r2, r3, r2, r3
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	009a      	lsls	r2, r3, #2
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a3c      	ldr	r2, [pc, #240]	; (8001228 <HAL_DMA_Init+0x14c>)
 8001136:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2202      	movs	r2, #2
 800113c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800114e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001152:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800115c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001168:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001174:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a1b      	ldr	r3, [r3, #32]
 800117a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4313      	orrs	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 f9be 	bl	800150c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001198:	d102      	bne.n	80011a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011b4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d010      	beq.n	80011e0 <HAL_DMA_Init+0x104>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	d80c      	bhi.n	80011e0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f9de 	bl	8001588 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	e008      	b.n	80011f2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40020407 	.word	0x40020407
 8001218:	bffdfff8 	.word	0xbffdfff8
 800121c:	cccccccd 	.word	0xcccccccd
 8001220:	40020000 	.word	0x40020000
 8001224:	bffdfbf8 	.word	0xbffdfbf8
 8001228:	40020400 	.word	0x40020400

0800122c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d005      	beq.n	8001250 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2204      	movs	r2, #4
 8001248:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	e037      	b.n	80012c0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 020e 	bic.w	r2, r2, #14
 800125e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800126a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800126e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0201 	bic.w	r2, r2, #1
 800127e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001284:	f003 021f 	and.w	r2, r3, #31
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	2101      	movs	r1, #1
 800128e:	fa01 f202 	lsl.w	r2, r1, r2
 8001292:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800129c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00c      	beq.n	80012c0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012b4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012be:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b084      	sub	sp, #16
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d00d      	beq.n	8001312 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2204      	movs	r2, #4
 80012fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	e047      	b.n	80013a2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 020e 	bic.w	r2, r2, #14
 8001320:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0201 	bic.w	r2, r2, #1
 8001330:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800133c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001340:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	f003 021f 	and.w	r2, r3, #31
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	2101      	movs	r1, #1
 8001350:	fa01 f202 	lsl.w	r2, r1, r2
 8001354:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800135e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00c      	beq.n	8001382 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001372:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001376:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001380:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	4798      	blx	r3
    }
  }
  return status;
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c8:	f003 031f 	and.w	r3, r3, #31
 80013cc:	2204      	movs	r2, #4
 80013ce:	409a      	lsls	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d026      	beq.n	8001426 <HAL_DMA_IRQHandler+0x7a>
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d021      	beq.n	8001426 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0320 	and.w	r3, r3, #32
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d107      	bne.n	8001400 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0204 	bic.w	r2, r2, #4
 80013fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001404:	f003 021f 	and.w	r2, r3, #31
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	2104      	movs	r1, #4
 800140e:	fa01 f202 	lsl.w	r2, r1, r2
 8001412:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	2b00      	cmp	r3, #0
 800141a:	d071      	beq.n	8001500 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001424:	e06c      	b.n	8001500 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f003 031f 	and.w	r3, r3, #31
 800142e:	2202      	movs	r2, #2
 8001430:	409a      	lsls	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4013      	ands	r3, r2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d02e      	beq.n	8001498 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d029      	beq.n	8001498 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0320 	and.w	r3, r3, #32
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10b      	bne.n	800146a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 020a 	bic.w	r2, r2, #10
 8001460:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f003 021f 	and.w	r2, r3, #31
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	2102      	movs	r1, #2
 8001478:	fa01 f202 	lsl.w	r2, r1, r2
 800147c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	2b00      	cmp	r3, #0
 800148c:	d038      	beq.n	8001500 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001496:	e033      	b.n	8001500 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149c:	f003 031f 	and.w	r3, r3, #31
 80014a0:	2208      	movs	r2, #8
 80014a2:	409a      	lsls	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d02a      	beq.n	8001502 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d025      	beq.n	8001502 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 020e 	bic.w	r2, r2, #14
 80014c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	f003 021f 	and.w	r2, r3, #31
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	2101      	movs	r1, #1
 80014d4:	fa01 f202 	lsl.w	r2, r1, r2
 80014d8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d004      	beq.n	8001502 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001500:	bf00      	nop
 8001502:	bf00      	nop
}
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800150c:	b480      	push	{r7}
 800150e:	b087      	sub	sp, #28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800151c:	429a      	cmp	r2, r3
 800151e:	d802      	bhi.n	8001526 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	e001      	b.n	800152a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001528:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	b2db      	uxtb	r3, r3
 8001534:	3b08      	subs	r3, #8
 8001536:	4a12      	ldr	r2, [pc, #72]	; (8001580 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001538:	fba2 2303 	umull	r2, r3, r2, r3
 800153c:	091b      	lsrs	r3, r3, #4
 800153e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	009a      	lsls	r2, r3, #2
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	4413      	add	r3, r2
 800154c:	461a      	mov	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001556:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	2201      	movs	r2, #1
 8001560:	409a      	lsls	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001566:	bf00      	nop
 8001568:	371c      	adds	r7, #28
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40020407 	.word	0x40020407
 8001578:	40020800 	.word	0x40020800
 800157c:	40020820 	.word	0x40020820
 8001580:	cccccccd 	.word	0xcccccccd
 8001584:	40020880 	.word	0x40020880

08001588 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	4b0b      	ldr	r3, [pc, #44]	; (80015c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	461a      	mov	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a08      	ldr	r2, [pc, #32]	; (80015cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80015aa:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	f003 031f 	and.w	r3, r3, #31
 80015b4:	2201      	movs	r2, #1
 80015b6:	409a      	lsls	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	1000823f 	.word	0x1000823f
 80015cc:	40020940 	.word	0x40020940

080015d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015de:	e15a      	b.n	8001896 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	2101      	movs	r1, #1
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	4013      	ands	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 814c 	beq.w	8001890 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d005      	beq.n	8001610 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800160c:	2b02      	cmp	r3, #2
 800160e:	d130      	bne.n	8001672 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	2203      	movs	r2, #3
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001646:	2201      	movs	r2, #1
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	f003 0201 	and.w	r2, r3, #1
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b03      	cmp	r3, #3
 800167c:	d017      	beq.n	80016ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	2203      	movs	r2, #3
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d123      	bne.n	8001702 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	08da      	lsrs	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3208      	adds	r2, #8
 80016c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	220f      	movs	r2, #15
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	691a      	ldr	r2, [r3, #16]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	08da      	lsrs	r2, r3, #3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3208      	adds	r2, #8
 80016fc:	6939      	ldr	r1, [r7, #16]
 80016fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	2203      	movs	r2, #3
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0203 	and.w	r2, r3, #3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 80a6 	beq.w	8001890 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001744:	4b5b      	ldr	r3, [pc, #364]	; (80018b4 <HAL_GPIO_Init+0x2e4>)
 8001746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001748:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <HAL_GPIO_Init+0x2e4>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6613      	str	r3, [r2, #96]	; 0x60
 8001750:	4b58      	ldr	r3, [pc, #352]	; (80018b4 <HAL_GPIO_Init+0x2e4>)
 8001752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800175c:	4a56      	ldr	r2, [pc, #344]	; (80018b8 <HAL_GPIO_Init+0x2e8>)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	220f      	movs	r2, #15
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001786:	d01f      	beq.n	80017c8 <HAL_GPIO_Init+0x1f8>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a4c      	ldr	r2, [pc, #304]	; (80018bc <HAL_GPIO_Init+0x2ec>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d019      	beq.n	80017c4 <HAL_GPIO_Init+0x1f4>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a4b      	ldr	r2, [pc, #300]	; (80018c0 <HAL_GPIO_Init+0x2f0>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d013      	beq.n	80017c0 <HAL_GPIO_Init+0x1f0>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a4a      	ldr	r2, [pc, #296]	; (80018c4 <HAL_GPIO_Init+0x2f4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d00d      	beq.n	80017bc <HAL_GPIO_Init+0x1ec>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4a49      	ldr	r2, [pc, #292]	; (80018c8 <HAL_GPIO_Init+0x2f8>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d007      	beq.n	80017b8 <HAL_GPIO_Init+0x1e8>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a48      	ldr	r2, [pc, #288]	; (80018cc <HAL_GPIO_Init+0x2fc>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d101      	bne.n	80017b4 <HAL_GPIO_Init+0x1e4>
 80017b0:	2305      	movs	r3, #5
 80017b2:	e00a      	b.n	80017ca <HAL_GPIO_Init+0x1fa>
 80017b4:	2306      	movs	r3, #6
 80017b6:	e008      	b.n	80017ca <HAL_GPIO_Init+0x1fa>
 80017b8:	2304      	movs	r3, #4
 80017ba:	e006      	b.n	80017ca <HAL_GPIO_Init+0x1fa>
 80017bc:	2303      	movs	r3, #3
 80017be:	e004      	b.n	80017ca <HAL_GPIO_Init+0x1fa>
 80017c0:	2302      	movs	r3, #2
 80017c2:	e002      	b.n	80017ca <HAL_GPIO_Init+0x1fa>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <HAL_GPIO_Init+0x1fa>
 80017c8:	2300      	movs	r3, #0
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	f002 0203 	and.w	r2, r2, #3
 80017d0:	0092      	lsls	r2, r2, #2
 80017d2:	4093      	lsls	r3, r2
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017da:	4937      	ldr	r1, [pc, #220]	; (80018b8 <HAL_GPIO_Init+0x2e8>)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	3302      	adds	r3, #2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017e8:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <HAL_GPIO_Init+0x300>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800180c:	4a30      	ldr	r2, [pc, #192]	; (80018d0 <HAL_GPIO_Init+0x300>)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001812:	4b2f      	ldr	r3, [pc, #188]	; (80018d0 <HAL_GPIO_Init+0x300>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	43db      	mvns	r3, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001836:	4a26      	ldr	r2, [pc, #152]	; (80018d0 <HAL_GPIO_Init+0x300>)
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_GPIO_Init+0x300>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	43db      	mvns	r3, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4013      	ands	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001860:	4a1b      	ldr	r2, [pc, #108]	; (80018d0 <HAL_GPIO_Init+0x300>)
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001866:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <HAL_GPIO_Init+0x300>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	43db      	mvns	r3, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800188a:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <HAL_GPIO_Init+0x300>)
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	3301      	adds	r3, #1
 8001894:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	fa22 f303 	lsr.w	r3, r2, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f47f ae9d 	bne.w	80015e0 <HAL_GPIO_Init+0x10>
  }
}
 80018a6:	bf00      	nop
 80018a8:	bf00      	nop
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40010000 	.word	0x40010000
 80018bc:	48000400 	.word	0x48000400
 80018c0:	48000800 	.word	0x48000800
 80018c4:	48000c00 	.word	0x48000c00
 80018c8:	48001000 	.word	0x48001000
 80018cc:	48001400 	.word	0x48001400
 80018d0:	40010400 	.word	0x40010400

080018d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018ec:	2301      	movs	r3, #1
 80018ee:	73fb      	strb	r3, [r7, #15]
 80018f0:	e001      	b.n	80018f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018f2:	2300      	movs	r3, #0
 80018f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3714      	adds	r7, #20
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
 8001910:	4613      	mov	r3, r2
 8001912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001914:	787b      	ldrb	r3, [r7, #1]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800191a:	887a      	ldrh	r2, [r7, #2]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001920:	e002      	b.n	8001928 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001922:	887a      	ldrh	r2, [r7, #2]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	4013      	ands	r3, r2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d006      	beq.n	8001958 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800194a:	4a05      	ldr	r2, [pc, #20]	; (8001960 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f806 	bl	8001964 <HAL_GPIO_EXTI_Callback>
  }
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40010400 	.word	0x40010400

08001964 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d141      	bne.n	8001a0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800198a:	4b4b      	ldr	r3, [pc, #300]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001996:	d131      	bne.n	80019fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001998:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800199e:	4a46      	ldr	r2, [pc, #280]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a8:	4b43      	ldr	r3, [pc, #268]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019b0:	4a41      	ldr	r2, [pc, #260]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019b8:	4b40      	ldr	r3, [pc, #256]	; (8001abc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2232      	movs	r2, #50	; 0x32
 80019be:	fb02 f303 	mul.w	r3, r2, r3
 80019c2:	4a3f      	ldr	r2, [pc, #252]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019c4:	fba2 2303 	umull	r2, r3, r2, r3
 80019c8:	0c9b      	lsrs	r3, r3, #18
 80019ca:	3301      	adds	r3, #1
 80019cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ce:	e002      	b.n	80019d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d6:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e2:	d102      	bne.n	80019ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f2      	bne.n	80019d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019ea:	4b33      	ldr	r3, [pc, #204]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f6:	d158      	bne.n	8001aaa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e057      	b.n	8001aac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019fc:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a02:	4a2d      	ldr	r2, [pc, #180]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a0c:	e04d      	b.n	8001aaa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a14:	d141      	bne.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a16:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a22:	d131      	bne.n	8001a88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a24:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a2a:	4a23      	ldr	r2, [pc, #140]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a34:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a3c:	4a1e      	ldr	r2, [pc, #120]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a44:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2232      	movs	r2, #50	; 0x32
 8001a4a:	fb02 f303 	mul.w	r3, r2, r3
 8001a4e:	4a1c      	ldr	r2, [pc, #112]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a50:	fba2 2303 	umull	r2, r3, r2, r3
 8001a54:	0c9b      	lsrs	r3, r3, #18
 8001a56:	3301      	adds	r3, #1
 8001a58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a5a:	e002      	b.n	8001a62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a6e:	d102      	bne.n	8001a76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f2      	bne.n	8001a5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a82:	d112      	bne.n	8001aaa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e011      	b.n	8001aac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a98:	e007      	b.n	8001aaa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a9a:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aa2:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aa8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	40007000 	.word	0x40007000
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	431bde83 	.word	0x431bde83

08001ac4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad2:	6093      	str	r3, [r2, #8]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40007000 	.word	0x40007000

08001ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e2fe      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d075      	beq.n	8001bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b02:	4b97      	ldr	r3, [pc, #604]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b0c:	4b94      	ldr	r3, [pc, #592]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	f003 0303 	and.w	r3, r3, #3
 8001b14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	2b0c      	cmp	r3, #12
 8001b1a:	d102      	bne.n	8001b22 <HAL_RCC_OscConfig+0x3e>
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d002      	beq.n	8001b28 <HAL_RCC_OscConfig+0x44>
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d10b      	bne.n	8001b40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	4b8d      	ldr	r3, [pc, #564]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d05b      	beq.n	8001bec <HAL_RCC_OscConfig+0x108>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d157      	bne.n	8001bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e2d9      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b48:	d106      	bne.n	8001b58 <HAL_RCC_OscConfig+0x74>
 8001b4a:	4b85      	ldr	r3, [pc, #532]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a84      	ldr	r2, [pc, #528]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e01d      	b.n	8001b94 <HAL_RCC_OscConfig+0xb0>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x98>
 8001b62:	4b7f      	ldr	r3, [pc, #508]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a7e      	ldr	r2, [pc, #504]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b7c      	ldr	r3, [pc, #496]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a7b      	ldr	r2, [pc, #492]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	e00b      	b.n	8001b94 <HAL_RCC_OscConfig+0xb0>
 8001b7c:	4b78      	ldr	r3, [pc, #480]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a77      	ldr	r2, [pc, #476]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b75      	ldr	r3, [pc, #468]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a74      	ldr	r2, [pc, #464]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d013      	beq.n	8001bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f960 	bl	8000e60 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff f95c 	bl	8000e60 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e29e      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb6:	4b6a      	ldr	r3, [pc, #424]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0xc0>
 8001bc2:	e014      	b.n	8001bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7ff f94c 	bl	8000e60 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7ff f948 	bl	8000e60 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e28a      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bde:	4b60      	ldr	r3, [pc, #384]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0xe8>
 8001bea:	e000      	b.n	8001bee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d075      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bfa:	4b59      	ldr	r3, [pc, #356]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c04:	4b56      	ldr	r3, [pc, #344]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	2b0c      	cmp	r3, #12
 8001c12:	d102      	bne.n	8001c1a <HAL_RCC_OscConfig+0x136>
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d002      	beq.n	8001c20 <HAL_RCC_OscConfig+0x13c>
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d11f      	bne.n	8001c60 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c20:	4b4f      	ldr	r3, [pc, #316]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_OscConfig+0x154>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e25d      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c38:	4b49      	ldr	r3, [pc, #292]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	061b      	lsls	r3, r3, #24
 8001c46:	4946      	ldr	r1, [pc, #280]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c4c:	4b45      	ldr	r3, [pc, #276]	; (8001d64 <HAL_RCC_OscConfig+0x280>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff f8b9 	bl	8000dc8 <HAL_InitTick>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d043      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e249      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d023      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c68:	4b3d      	ldr	r3, [pc, #244]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a3c      	ldr	r2, [pc, #240]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7ff f8f4 	bl	8000e60 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7c:	f7ff f8f0 	bl	8000e60 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e232      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c8e:	4b34      	ldr	r3, [pc, #208]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9a:	4b31      	ldr	r3, [pc, #196]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	061b      	lsls	r3, r3, #24
 8001ca8:	492d      	ldr	r1, [pc, #180]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	604b      	str	r3, [r1, #4]
 8001cae:	e01a      	b.n	8001ce6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb0:	4b2b      	ldr	r3, [pc, #172]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a2a      	ldr	r2, [pc, #168]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001cb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7ff f8d0 	bl	8000e60 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc4:	f7ff f8cc 	bl	8000e60 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e20e      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cd6:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x1e0>
 8001ce2:	e000      	b.n	8001ce6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ce4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d041      	beq.n	8001d76 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d01c      	beq.n	8001d34 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d00:	4a17      	ldr	r2, [pc, #92]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0a:	f7ff f8a9 	bl	8000e60 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d12:	f7ff f8a5 	bl	8000e60 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e1e7      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d24:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0ef      	beq.n	8001d12 <HAL_RCC_OscConfig+0x22e>
 8001d32:	e020      	b.n	8001d76 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d34:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d3a:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <HAL_RCC_OscConfig+0x27c>)
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d44:	f7ff f88c 	bl	8000e60 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d4a:	e00d      	b.n	8001d68 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4c:	f7ff f888 	bl	8000e60 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d906      	bls.n	8001d68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e1ca      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
 8001d5e:	bf00      	nop
 8001d60:	40021000 	.word	0x40021000
 8001d64:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d68:	4b8c      	ldr	r3, [pc, #560]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1ea      	bne.n	8001d4c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80a6 	beq.w	8001ed0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d84:	2300      	movs	r3, #0
 8001d86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d88:	4b84      	ldr	r3, [pc, #528]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_OscConfig+0x2b4>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_OscConfig+0x2b6>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00d      	beq.n	8001dba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d9e:	4b7f      	ldr	r3, [pc, #508]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da2:	4a7e      	ldr	r2, [pc, #504]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da8:	6593      	str	r3, [r2, #88]	; 0x58
 8001daa:	4b7c      	ldr	r3, [pc, #496]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001db6:	2301      	movs	r3, #1
 8001db8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dba:	4b79      	ldr	r3, [pc, #484]	; (8001fa0 <HAL_RCC_OscConfig+0x4bc>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d118      	bne.n	8001df8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dc6:	4b76      	ldr	r3, [pc, #472]	; (8001fa0 <HAL_RCC_OscConfig+0x4bc>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a75      	ldr	r2, [pc, #468]	; (8001fa0 <HAL_RCC_OscConfig+0x4bc>)
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd2:	f7ff f845 	bl	8000e60 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dda:	f7ff f841 	bl	8000e60 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e183      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dec:	4b6c      	ldr	r3, [pc, #432]	; (8001fa0 <HAL_RCC_OscConfig+0x4bc>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d108      	bne.n	8001e12 <HAL_RCC_OscConfig+0x32e>
 8001e00:	4b66      	ldr	r3, [pc, #408]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e06:	4a65      	ldr	r2, [pc, #404]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e10:	e024      	b.n	8001e5c <HAL_RCC_OscConfig+0x378>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b05      	cmp	r3, #5
 8001e18:	d110      	bne.n	8001e3c <HAL_RCC_OscConfig+0x358>
 8001e1a:	4b60      	ldr	r3, [pc, #384]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e20:	4a5e      	ldr	r2, [pc, #376]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e2a:	4b5c      	ldr	r3, [pc, #368]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e30:	4a5a      	ldr	r2, [pc, #360]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e3a:	e00f      	b.n	8001e5c <HAL_RCC_OscConfig+0x378>
 8001e3c:	4b57      	ldr	r3, [pc, #348]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e42:	4a56      	ldr	r2, [pc, #344]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e4c:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e52:	4a52      	ldr	r2, [pc, #328]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e54:	f023 0304 	bic.w	r3, r3, #4
 8001e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d016      	beq.n	8001e92 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e64:	f7fe fffc 	bl	8000e60 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e6a:	e00a      	b.n	8001e82 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6c:	f7fe fff8 	bl	8000e60 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e138      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e82:	4b46      	ldr	r3, [pc, #280]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0ed      	beq.n	8001e6c <HAL_RCC_OscConfig+0x388>
 8001e90:	e015      	b.n	8001ebe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e92:	f7fe ffe5 	bl	8000e60 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e98:	e00a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9a:	f7fe ffe1 	bl	8000e60 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e121      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eb0:	4b3a      	ldr	r3, [pc, #232]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ed      	bne.n	8001e9a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ebe:	7ffb      	ldrb	r3, [r7, #31]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d105      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec4:	4b35      	ldr	r3, [pc, #212]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	4a34      	ldr	r2, [pc, #208]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ece:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0320 	and.w	r3, r3, #32
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d03c      	beq.n	8001f56 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01c      	beq.n	8001f1e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ee4:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eea:	4a2c      	ldr	r2, [pc, #176]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef4:	f7fe ffb4 	bl	8000e60 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001efc:	f7fe ffb0 	bl	8000e60 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e0f2      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f0e:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0ef      	beq.n	8001efc <HAL_RCC_OscConfig+0x418>
 8001f1c:	e01b      	b.n	8001f56 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001f20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f24:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001f26:	f023 0301 	bic.w	r3, r3, #1
 8001f2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2e:	f7fe ff97 	bl	8000e60 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f36:	f7fe ff93 	bl	8000e60 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e0d5      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1ef      	bne.n	8001f36 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 80c9 	beq.w	80020f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 030c 	and.w	r3, r3, #12
 8001f68:	2b0c      	cmp	r3, #12
 8001f6a:	f000 8083 	beq.w	8002074 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d15e      	bne.n	8002034 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a08      	ldr	r2, [pc, #32]	; (8001f9c <HAL_RCC_OscConfig+0x4b8>)
 8001f7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7fe ff6d 	bl	8000e60 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f88:	e00c      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7fe ff69 	bl	8000e60 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d905      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e0ab      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa4:	4b55      	ldr	r3, [pc, #340]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ec      	bne.n	8001f8a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb0:	4b52      	ldr	r3, [pc, #328]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	4b52      	ldr	r3, [pc, #328]	; (8002100 <HAL_RCC_OscConfig+0x61c>)
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6a11      	ldr	r1, [r2, #32]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fc0:	3a01      	subs	r2, #1
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	4311      	orrs	r1, r2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001fca:	0212      	lsls	r2, r2, #8
 8001fcc:	4311      	orrs	r1, r2
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fd2:	0852      	lsrs	r2, r2, #1
 8001fd4:	3a01      	subs	r2, #1
 8001fd6:	0552      	lsls	r2, r2, #21
 8001fd8:	4311      	orrs	r1, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fde:	0852      	lsrs	r2, r2, #1
 8001fe0:	3a01      	subs	r2, #1
 8001fe2:	0652      	lsls	r2, r2, #25
 8001fe4:	4311      	orrs	r1, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fea:	06d2      	lsls	r2, r2, #27
 8001fec:	430a      	orrs	r2, r1
 8001fee:	4943      	ldr	r1, [pc, #268]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff4:	4b41      	ldr	r3, [pc, #260]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a40      	ldr	r2, [pc, #256]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8001ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002000:	4b3e      	ldr	r3, [pc, #248]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	4a3d      	ldr	r2, [pc, #244]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8002006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800200a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7fe ff28 	bl	8000e60 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002014:	f7fe ff24 	bl	8000e60 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e066      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002026:	4b35      	ldr	r3, [pc, #212]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0x530>
 8002032:	e05e      	b.n	80020f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002034:	4b31      	ldr	r3, [pc, #196]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a30      	ldr	r2, [pc, #192]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 800203a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800203e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7fe ff0e 	bl	8000e60 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002048:	f7fe ff0a 	bl	8000e60 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e04c      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800205a:	4b28      	ldr	r3, [pc, #160]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002066:	4b25      	ldr	r3, [pc, #148]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	4924      	ldr	r1, [pc, #144]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 800206c:	4b25      	ldr	r3, [pc, #148]	; (8002104 <HAL_RCC_OscConfig+0x620>)
 800206e:	4013      	ands	r3, r2
 8002070:	60cb      	str	r3, [r1, #12]
 8002072:	e03e      	b.n	80020f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e039      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002080:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <HAL_RCC_OscConfig+0x618>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f003 0203 	and.w	r2, r3, #3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	429a      	cmp	r2, r3
 8002092:	d12c      	bne.n	80020ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	3b01      	subs	r3, #1
 80020a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d123      	bne.n	80020ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d11b      	bne.n	80020ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d113      	bne.n	80020ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	085b      	lsrs	r3, r3, #1
 80020d2:	3b01      	subs	r3, #1
 80020d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d109      	bne.n	80020ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	3b01      	subs	r3, #1
 80020e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d001      	beq.n	80020f2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3720      	adds	r7, #32
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	019f800c 	.word	0x019f800c
 8002104:	feeefffc 	.word	0xfeeefffc

08002108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e11e      	b.n	800235e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002120:	4b91      	ldr	r3, [pc, #580]	; (8002368 <HAL_RCC_ClockConfig+0x260>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d910      	bls.n	8002150 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b8e      	ldr	r3, [pc, #568]	; (8002368 <HAL_RCC_ClockConfig+0x260>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 020f 	bic.w	r2, r3, #15
 8002136:	498c      	ldr	r1, [pc, #560]	; (8002368 <HAL_RCC_ClockConfig+0x260>)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b8a      	ldr	r3, [pc, #552]	; (8002368 <HAL_RCC_ClockConfig+0x260>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e106      	b.n	800235e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d073      	beq.n	8002244 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b03      	cmp	r3, #3
 8002162:	d129      	bne.n	80021b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002164:	4b81      	ldr	r3, [pc, #516]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0f4      	b.n	800235e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002174:	f000 f99e 	bl	80024b4 <RCC_GetSysClockFreqFromPLLSource>
 8002178:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4a7c      	ldr	r2, [pc, #496]	; (8002370 <HAL_RCC_ClockConfig+0x268>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d93f      	bls.n	8002202 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002182:	4b7a      	ldr	r3, [pc, #488]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002196:	2b00      	cmp	r3, #0
 8002198:	d033      	beq.n	8002202 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d12f      	bne.n	8002202 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021a2:	4b72      	ldr	r3, [pc, #456]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021aa:	4a70      	ldr	r2, [pc, #448]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 80021ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	e024      	b.n	8002202 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d107      	bne.n	80021d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021c0:	4b6a      	ldr	r3, [pc, #424]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d109      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0c6      	b.n	800235e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d0:	4b66      	ldr	r3, [pc, #408]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0be      	b.n	800235e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80021e0:	f000 f8ce 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 80021e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4a61      	ldr	r2, [pc, #388]	; (8002370 <HAL_RCC_ClockConfig+0x268>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d909      	bls.n	8002202 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021ee:	4b5f      	ldr	r3, [pc, #380]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021f6:	4a5d      	ldr	r2, [pc, #372]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 80021f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002202:	4b5a      	ldr	r3, [pc, #360]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f023 0203 	bic.w	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	4957      	ldr	r1, [pc, #348]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002210:	4313      	orrs	r3, r2
 8002212:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002214:	f7fe fe24 	bl	8000e60 <HAL_GetTick>
 8002218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221a:	e00a      	b.n	8002232 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800221c:	f7fe fe20 	bl	8000e60 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f241 3288 	movw	r2, #5000	; 0x1388
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e095      	b.n	800235e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	4b4e      	ldr	r3, [pc, #312]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 020c 	and.w	r2, r3, #12
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	429a      	cmp	r2, r3
 8002242:	d1eb      	bne.n	800221c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d023      	beq.n	8002298 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800225c:	4b43      	ldr	r3, [pc, #268]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4a42      	ldr	r2, [pc, #264]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002262:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002266:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d007      	beq.n	8002284 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002274:	4b3d      	ldr	r3, [pc, #244]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800227c:	4a3b      	ldr	r2, [pc, #236]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 800227e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002282:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002284:	4b39      	ldr	r3, [pc, #228]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	4936      	ldr	r1, [pc, #216]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]
 8002296:	e008      	b.n	80022aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2b80      	cmp	r3, #128	; 0x80
 800229c:	d105      	bne.n	80022aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800229e:	4b33      	ldr	r3, [pc, #204]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	4a32      	ldr	r2, [pc, #200]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 80022a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022aa:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <HAL_RCC_ClockConfig+0x260>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d21d      	bcs.n	80022f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b8:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <HAL_RCC_ClockConfig+0x260>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 020f 	bic.w	r2, r3, #15
 80022c0:	4929      	ldr	r1, [pc, #164]	; (8002368 <HAL_RCC_ClockConfig+0x260>)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022c8:	f7fe fdca 	bl	8000e60 <HAL_GetTick>
 80022cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d0:	f7fe fdc6 	bl	8000e60 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	; 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e03b      	b.n	800235e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	4b20      	ldr	r3, [pc, #128]	; (8002368 <HAL_RCC_ClockConfig+0x260>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d1ed      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002300:	4b1a      	ldr	r3, [pc, #104]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4917      	ldr	r1, [pc, #92]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 800230e:	4313      	orrs	r3, r2
 8002310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d009      	beq.n	8002332 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	490f      	ldr	r1, [pc, #60]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002332:	f000 f825 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 8002336:	4602      	mov	r2, r0
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <HAL_RCC_ClockConfig+0x264>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	490c      	ldr	r1, [pc, #48]	; (8002374 <HAL_RCC_ClockConfig+0x26c>)
 8002344:	5ccb      	ldrb	r3, [r1, r3]
 8002346:	f003 031f 	and.w	r3, r3, #31
 800234a:	fa22 f303 	lsr.w	r3, r2, r3
 800234e:	4a0a      	ldr	r2, [pc, #40]	; (8002378 <HAL_RCC_ClockConfig+0x270>)
 8002350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002352:	4b0a      	ldr	r3, [pc, #40]	; (800237c <HAL_RCC_ClockConfig+0x274>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fd36 	bl	8000dc8 <HAL_InitTick>
 800235c:	4603      	mov	r3, r0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40022000 	.word	0x40022000
 800236c:	40021000 	.word	0x40021000
 8002370:	04c4b400 	.word	0x04c4b400
 8002374:	08005a44 	.word	0x08005a44
 8002378:	20000000 	.word	0x20000000
 800237c:	20000004 	.word	0x20000004

08002380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002380:	b480      	push	{r7}
 8002382:	b087      	sub	sp, #28
 8002384:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002386:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b04      	cmp	r3, #4
 8002390:	d102      	bne.n	8002398 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002392:	4b2a      	ldr	r3, [pc, #168]	; (800243c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	e047      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002398:	4b27      	ldr	r3, [pc, #156]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb8>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d102      	bne.n	80023aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023a4:	4b26      	ldr	r3, [pc, #152]	; (8002440 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	e03e      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80023aa:	4b23      	ldr	r3, [pc, #140]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b0c      	cmp	r3, #12
 80023b4:	d136      	bne.n	8002424 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023b6:	4b20      	ldr	r3, [pc, #128]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023c0:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	091b      	lsrs	r3, r3, #4
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3301      	adds	r3, #1
 80023cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d10c      	bne.n	80023ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023d4:	4a1a      	ldr	r2, [pc, #104]	; (8002440 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	4a16      	ldr	r2, [pc, #88]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023de:	68d2      	ldr	r2, [r2, #12]
 80023e0:	0a12      	lsrs	r2, r2, #8
 80023e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023e6:	fb02 f303 	mul.w	r3, r2, r3
 80023ea:	617b      	str	r3, [r7, #20]
      break;
 80023ec:	e00c      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023ee:	4a13      	ldr	r2, [pc, #76]	; (800243c <HAL_RCC_GetSysClockFreq+0xbc>)
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f6:	4a10      	ldr	r2, [pc, #64]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f8:	68d2      	ldr	r2, [r2, #12]
 80023fa:	0a12      	lsrs	r2, r2, #8
 80023fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002400:	fb02 f303 	mul.w	r3, r2, r3
 8002404:	617b      	str	r3, [r7, #20]
      break;
 8002406:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <HAL_RCC_GetSysClockFreq+0xb8>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	0e5b      	lsrs	r3, r3, #25
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	3301      	adds	r3, #1
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	e001      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002428:	693b      	ldr	r3, [r7, #16]
}
 800242a:	4618      	mov	r0, r3
 800242c:	371c      	adds	r7, #28
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	00f42400 	.word	0x00f42400
 8002440:	016e3600 	.word	0x016e3600

08002444 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002448:	4b03      	ldr	r3, [pc, #12]	; (8002458 <HAL_RCC_GetHCLKFreq+0x14>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000000 	.word	0x20000000

0800245c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002460:	f7ff fff0 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8002464:	4602      	mov	r2, r0
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4904      	ldr	r1, [pc, #16]	; (8002484 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002472:	5ccb      	ldrb	r3, [r1, r3]
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800247c:	4618      	mov	r0, r3
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40021000 	.word	0x40021000
 8002484:	08005a54 	.word	0x08005a54

08002488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800248c:	f7ff ffda 	bl	8002444 <HAL_RCC_GetHCLKFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	0adb      	lsrs	r3, r3, #11
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	4904      	ldr	r1, [pc, #16]	; (80024b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800249e:	5ccb      	ldrb	r3, [r1, r3]
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40021000 	.word	0x40021000
 80024b0:	08005a54 	.word	0x08005a54

080024b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ba:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024c4:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	3301      	adds	r3, #1
 80024d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d10c      	bne.n	80024f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024d8:	4a17      	ldr	r2, [pc, #92]	; (8002538 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e0:	4a14      	ldr	r2, [pc, #80]	; (8002534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024e2:	68d2      	ldr	r2, [r2, #12]
 80024e4:	0a12      	lsrs	r2, r2, #8
 80024e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024ea:	fb02 f303 	mul.w	r3, r2, r3
 80024ee:	617b      	str	r3, [r7, #20]
    break;
 80024f0:	e00c      	b.n	800250c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024f2:	4a12      	ldr	r2, [pc, #72]	; (800253c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fa:	4a0e      	ldr	r2, [pc, #56]	; (8002534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024fc:	68d2      	ldr	r2, [r2, #12]
 80024fe:	0a12      	lsrs	r2, r2, #8
 8002500:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002504:	fb02 f303 	mul.w	r3, r2, r3
 8002508:	617b      	str	r3, [r7, #20]
    break;
 800250a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	0e5b      	lsrs	r3, r3, #25
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	3301      	adds	r3, #1
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	fbb2 f3f3 	udiv	r3, r2, r3
 8002524:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002526:	687b      	ldr	r3, [r7, #4]
}
 8002528:	4618      	mov	r0, r3
 800252a:	371c      	adds	r7, #28
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	40021000 	.word	0x40021000
 8002538:	016e3600 	.word	0x016e3600
 800253c:	00f42400 	.word	0x00f42400

08002540 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002548:	2300      	movs	r3, #0
 800254a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800254c:	2300      	movs	r3, #0
 800254e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 8098 	beq.w	800268e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002562:	4b43      	ldr	r3, [pc, #268]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10d      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256e:	4b40      	ldr	r3, [pc, #256]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002572:	4a3f      	ldr	r2, [pc, #252]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002578:	6593      	str	r3, [r2, #88]	; 0x58
 800257a:	4b3d      	ldr	r3, [pc, #244]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800257c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002586:	2301      	movs	r3, #1
 8002588:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800258a:	4b3a      	ldr	r3, [pc, #232]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a39      	ldr	r2, [pc, #228]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002594:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002596:	f7fe fc63 	bl	8000e60 <HAL_GetTick>
 800259a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800259c:	e009      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259e:	f7fe fc5f 	bl	8000e60 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d902      	bls.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	74fb      	strb	r3, [r7, #19]
        break;
 80025b0:	e005      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025b2:	4b30      	ldr	r3, [pc, #192]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0ef      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80025be:	7cfb      	ldrb	r3, [r7, #19]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d159      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025c4:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d01e      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d019      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025e0:	4b23      	ldr	r3, [pc, #140]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025ec:	4b20      	ldr	r3, [pc, #128]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f2:	4a1f      	ldr	r2, [pc, #124]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025fc:	4b1c      	ldr	r3, [pc, #112]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002602:	4a1b      	ldr	r2, [pc, #108]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800260c:	4a18      	ldr	r2, [pc, #96]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d016      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7fe fc1f 	bl	8000e60 <HAL_GetTick>
 8002622:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002624:	e00b      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002626:	f7fe fc1b 	bl	8000e60 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f241 3288 	movw	r2, #5000	; 0x1388
 8002634:	4293      	cmp	r3, r2
 8002636:	d902      	bls.n	800263e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	74fb      	strb	r3, [r7, #19]
            break;
 800263c:	e006      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800263e:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0ec      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800264c:	7cfb      	ldrb	r3, [r7, #19]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10b      	bne.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002658:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002660:	4903      	ldr	r1, [pc, #12]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002668:	e008      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800266a:	7cfb      	ldrb	r3, [r7, #19]
 800266c:	74bb      	strb	r3, [r7, #18]
 800266e:	e005      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002670:	40021000 	.word	0x40021000
 8002674:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800267c:	7c7b      	ldrb	r3, [r7, #17]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d105      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002682:	4ba7      	ldr	r3, [pc, #668]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	4aa6      	ldr	r2, [pc, #664]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800268c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800269a:	4ba1      	ldr	r3, [pc, #644]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800269c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a0:	f023 0203 	bic.w	r2, r3, #3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	499d      	ldr	r1, [pc, #628]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00a      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026bc:	4b98      	ldr	r3, [pc, #608]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f023 020c 	bic.w	r2, r3, #12
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	4995      	ldr	r1, [pc, #596]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026de:	4b90      	ldr	r3, [pc, #576]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	498c      	ldr	r1, [pc, #560]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002700:	4b87      	ldr	r3, [pc, #540]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002706:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	4984      	ldr	r1, [pc, #528]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002722:	4b7f      	ldr	r3, [pc, #508]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002728:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	497b      	ldr	r1, [pc, #492]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002744:	4b76      	ldr	r3, [pc, #472]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	4973      	ldr	r1, [pc, #460]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002766:	4b6e      	ldr	r3, [pc, #440]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	496a      	ldr	r1, [pc, #424]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002788:	4b65      	ldr	r3, [pc, #404]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	4962      	ldr	r1, [pc, #392]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027aa:	4b5d      	ldr	r3, [pc, #372]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	4959      	ldr	r1, [pc, #356]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027cc:	4b54      	ldr	r3, [pc, #336]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027d2:	f023 0203 	bic.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	4951      	ldr	r1, [pc, #324]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00a      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027ee:	4b4c      	ldr	r3, [pc, #304]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	4948      	ldr	r1, [pc, #288]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	2b00      	cmp	r3, #0
 800280e:	d015      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002810:	4b43      	ldr	r3, [pc, #268]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002816:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4940      	ldr	r1, [pc, #256]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800282e:	d105      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002830:	4b3b      	ldr	r3, [pc, #236]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4a3a      	ldr	r2, [pc, #232]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002844:	2b00      	cmp	r3, #0
 8002846:	d015      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002848:	4b35      	ldr	r3, [pc, #212]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002856:	4932      	ldr	r1, [pc, #200]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002862:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002866:	d105      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002868:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4a2c      	ldr	r2, [pc, #176]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002872:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d015      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002880:	4b27      	ldr	r3, [pc, #156]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288e:	4924      	ldr	r1, [pc, #144]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800289e:	d105      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028a0:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4a1e      	ldr	r2, [pc, #120]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d015      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028b8:	4b19      	ldr	r3, [pc, #100]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c6:	4916      	ldr	r1, [pc, #88]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028d6:	d105      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4a10      	ldr	r2, [pc, #64]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d019      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	4908      	ldr	r1, [pc, #32]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800290e:	d109      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002910:	4b03      	ldr	r3, [pc, #12]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4a02      	ldr	r2, [pc, #8]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800291a:	60d3      	str	r3, [r2, #12]
 800291c:	e002      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800291e:	bf00      	nop
 8002920:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d015      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002930:	4b29      	ldr	r3, [pc, #164]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002936:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	4926      	ldr	r1, [pc, #152]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800294e:	d105      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002950:	4b21      	ldr	r3, [pc, #132]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4a20      	ldr	r2, [pc, #128]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d015      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002968:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002976:	4918      	ldr	r1, [pc, #96]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002986:	d105      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800298e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002992:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d015      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80029a0:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ae:	490a      	ldr	r1, [pc, #40]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029be:	d105      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4a04      	ldr	r2, [pc, #16]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80029cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000

080029dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e09d      	b.n	8002b2a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d108      	bne.n	8002a08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029fe:	d009      	beq.n	8002a14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	61da      	str	r2, [r3, #28]
 8002a06:	e005      	b.n	8002a14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe f8d0 	bl	8000bd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a54:	d902      	bls.n	8002a5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	e002      	b.n	8002a62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002a6a:	d007      	beq.n	8002a7c <HAL_SPI_Init+0xa0>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a74:	d002      	beq.n	8002a7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abe:	ea42 0103 	orr.w	r1, r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	0c1b      	lsrs	r3, r3, #16
 8002ad8:	f003 0204 	and.w	r2, r3, #4
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002af8:	ea42 0103 	orr.w	r1, r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	69da      	ldr	r2, [r3, #28]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b4c:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b54:	7dbb      	ldrb	r3, [r7, #22]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d00d      	beq.n	8002b76 <HAL_SPI_TransmitReceive_IT+0x42>
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b60:	d106      	bne.n	8002b70 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d102      	bne.n	8002b70 <HAL_SPI_TransmitReceive_IT+0x3c>
 8002b6a:	7dbb      	ldrb	r3, [r7, #22]
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d002      	beq.n	8002b76 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8002b70:	2302      	movs	r3, #2
 8002b72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b74:	e07d      	b.n	8002c72 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_SPI_TransmitReceive_IT+0x54>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_SPI_TransmitReceive_IT+0x54>
 8002b82:	887b      	ldrh	r3, [r7, #2]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d102      	bne.n	8002b8e <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b8c:	e071      	b.n	8002c72 <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_SPI_TransmitReceive_IT+0x68>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e06b      	b.n	8002c74 <HAL_SPI_TransmitReceive_IT+0x140>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d003      	beq.n	8002bb8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2205      	movs	r2, #5
 8002bb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	887a      	ldrh	r2, [r7, #2]
 8002bc8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	887a      	ldrh	r2, [r7, #2]
 8002bce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	887a      	ldrh	r2, [r7, #2]
 8002bda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	887a      	ldrh	r2, [r7, #2]
 8002be2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bee:	d906      	bls.n	8002bfe <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a23      	ldr	r2, [pc, #140]	; (8002c80 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8002bf4:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	4a22      	ldr	r2, [pc, #136]	; (8002c84 <HAL_SPI_TransmitReceive_IT+0x150>)
 8002bfa:	651a      	str	r2, [r3, #80]	; 0x50
 8002bfc:	e005      	b.n	8002c0a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4a21      	ldr	r2, [pc, #132]	; (8002c88 <HAL_SPI_TransmitReceive_IT+0x154>)
 8002c02:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4a21      	ldr	r2, [pc, #132]	; (8002c8c <HAL_SPI_TransmitReceive_IT+0x158>)
 8002c08:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c12:	d802      	bhi.n	8002c1a <HAL_SPI_TransmitReceive_IT+0xe6>
 8002c14:	887b      	ldrh	r3, [r7, #2]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d908      	bls.n	8002c2c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	e007      	b.n	8002c3c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c3a:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c46:	2b40      	cmp	r3, #64	; 0x40
 8002c48:	d007      	beq.n	8002c5a <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c58:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002c70:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8002c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	371c      	adds	r7, #28
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	0800301b 	.word	0x0800301b
 8002c84:	08003081 	.word	0x08003081
 8002c88:	08002ecb 	.word	0x08002ecb
 8002c8c:	08002f89 	.word	0x08002f89

08002c90 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10e      	bne.n	8002cd0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d009      	beq.n	8002cd0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d004      	beq.n	8002cd0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
    return;
 8002cce:	e0ce      	b.n	8002e6e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d009      	beq.n	8002cee <HAL_SPI_IRQHandler+0x5e>
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d004      	beq.n	8002cee <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	4798      	blx	r3
    return;
 8002cec:	e0bf      	b.n	8002e6e <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10a      	bne.n	8002d0e <HAL_SPI_IRQHandler+0x7e>
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d105      	bne.n	8002d0e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 80b0 	beq.w	8002e6e <HAL_SPI_IRQHandler+0x1de>
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80aa 	beq.w	8002e6e <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d023      	beq.n	8002d6c <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d011      	beq.n	8002d54 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d34:	f043 0204 	orr.w	r2, r3, #4
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	e00b      	b.n	8002d6c <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d54:	2300      	movs	r3, #0
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	693b      	ldr	r3, [r7, #16]
        return;
 8002d6a:	e080      	b.n	8002e6e <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d014      	beq.n	8002da0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7a:	f043 0201 	orr.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00c      	beq.n	8002dc4 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dae:	f043 0208 	orr.w	r2, r3, #8
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d04f      	beq.n	8002e6c <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dda:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d104      	bne.n	8002df8 <HAL_SPI_IRQHandler+0x168>
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d034      	beq.n	8002e62 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0203 	bic.w	r2, r2, #3
 8002e06:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d011      	beq.n	8002e34 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e14:	4a17      	ldr	r2, [pc, #92]	; (8002e74 <HAL_SPI_IRQHandler+0x1e4>)
 8002e16:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fe fa5e 	bl	80012de <HAL_DMA_Abort_IT>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d005      	beq.n	8002e34 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d016      	beq.n	8002e6a <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e40:	4a0c      	ldr	r2, [pc, #48]	; (8002e74 <HAL_SPI_IRQHandler+0x1e4>)
 8002e42:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7fe fa48 	bl	80012de <HAL_DMA_Abort_IT>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00a      	beq.n	8002e6a <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002e60:	e003      	b.n	8002e6a <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f812 	bl	8002e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002e68:	e000      	b.n	8002e6c <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002e6a:	bf00      	nop
    return;
 8002e6c:	bf00      	nop
  }
}
 8002e6e:	3720      	adds	r7, #32
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	08002ea1 	.word	0x08002ea1

08002e78 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f7ff ffe5 	bl	8002e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d923      	bls.n	8002f26 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	b292      	uxth	r2, r2
 8002eea:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	1c9a      	adds	r2, r3, #2
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	3b02      	subs	r3, #2
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d11f      	bne.n	8002f54 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	e016      	b.n	8002f54 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f103 020c 	add.w	r2, r3, #12
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	7812      	ldrb	r2, [r2, #0]
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10f      	bne.n	8002f80 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f6e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d102      	bne.n	8002f80 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fa14 	bl	80033a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d912      	bls.n	8002fc0 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9e:	881a      	ldrh	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002faa:	1c9a      	adds	r2, r3, #2
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b02      	subs	r3, #2
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fbe:	e012      	b.n	8002fe6 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	330c      	adds	r3, #12
 8002fca:	7812      	ldrb	r2, [r2, #0]
 8002fcc:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d110      	bne.n	8003012 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ffe:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d102      	bne.n	8003012 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f9cb 	bl	80033a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	b292      	uxth	r2, r2
 800302e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	1c9a      	adds	r2, r3, #2
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003040:	b29b      	uxth	r3, r3
 8003042:	3b01      	subs	r3, #1
 8003044:	b29a      	uxth	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10f      	bne.n	8003078 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003066:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d102      	bne.n	8003078 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f998 	bl	80033a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308c:	881a      	ldrh	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003098:	1c9a      	adds	r2, r3, #2
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d110      	bne.n	80030d8 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030c4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d102      	bne.n	80030d8 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f968 	bl	80033a8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80030d8:	bf00      	nop
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	603b      	str	r3, [r7, #0]
 80030ec:	4613      	mov	r3, r2
 80030ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030f0:	f7fd feb6 	bl	8000e60 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	4413      	add	r3, r2
 80030fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003100:	f7fd feae 	bl	8000e60 <HAL_GetTick>
 8003104:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003106:	4b39      	ldr	r3, [pc, #228]	; (80031ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	015b      	lsls	r3, r3, #5
 800310c:	0d1b      	lsrs	r3, r3, #20
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	fb02 f303 	mul.w	r3, r2, r3
 8003114:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003116:	e054      	b.n	80031c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	d050      	beq.n	80031c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003120:	f7fd fe9e 	bl	8000e60 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	429a      	cmp	r2, r3
 800312e:	d902      	bls.n	8003136 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d13d      	bne.n	80031b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003144:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800314e:	d111      	bne.n	8003174 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003158:	d004      	beq.n	8003164 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003162:	d107      	bne.n	8003174 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003172:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800317c:	d10f      	bne.n	800319e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800319c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e017      	b.n	80031e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	3b01      	subs	r3, #1
 80031c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4013      	ands	r3, r2
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	bf0c      	ite	eq
 80031d2:	2301      	moveq	r3, #1
 80031d4:	2300      	movne	r3, #0
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	461a      	mov	r2, r3
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d19b      	bne.n	8003118 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3720      	adds	r7, #32
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000000 	.word	0x20000000

080031f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08a      	sub	sp, #40	; 0x28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80031fe:	2300      	movs	r3, #0
 8003200:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003202:	f7fd fe2d 	bl	8000e60 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	4413      	add	r3, r2
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003212:	f7fd fe25 	bl	8000e60 <HAL_GetTick>
 8003216:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	330c      	adds	r3, #12
 800321e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003220:	4b3d      	ldr	r3, [pc, #244]	; (8003318 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	4613      	mov	r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	00da      	lsls	r2, r3, #3
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	0d1b      	lsrs	r3, r3, #20
 8003230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003232:	fb02 f303 	mul.w	r3, r2, r3
 8003236:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003238:	e060      	b.n	80032fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003240:	d107      	bne.n	8003252 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d104      	bne.n	8003252 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003250:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003258:	d050      	beq.n	80032fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800325a:	f7fd fe01 	bl	8000e60 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003266:	429a      	cmp	r2, r3
 8003268:	d902      	bls.n	8003270 <SPI_WaitFifoStateUntilTimeout+0x80>
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	2b00      	cmp	r3, #0
 800326e:	d13d      	bne.n	80032ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800327e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003288:	d111      	bne.n	80032ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003292:	d004      	beq.n	800329e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329c:	d107      	bne.n	80032ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032b6:	d10f      	bne.n	80032d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e010      	b.n	800330e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	4013      	ands	r3, r2
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	429a      	cmp	r2, r3
 800330a:	d196      	bne.n	800323a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3728      	adds	r7, #40	; 0x28
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000000 	.word	0x20000000

0800331c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af02      	add	r7, sp, #8
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2200      	movs	r2, #0
 8003330:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f7ff ff5b 	bl	80031f0 <SPI_WaitFifoStateUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d007      	beq.n	8003350 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e027      	b.n	80033a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2200      	movs	r2, #0
 8003358:	2180      	movs	r1, #128	; 0x80
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f7ff fec0 	bl	80030e0 <SPI_WaitFlagStateUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d007      	beq.n	8003376 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336a:	f043 0220 	orr.w	r2, r3, #32
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e014      	b.n	80033a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2200      	movs	r2, #0
 800337e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f7ff ff34 	bl	80031f0 <SPI_WaitFifoStateUntilTimeout>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d007      	beq.n	800339e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003392:	f043 0220 	orr.w	r2, r3, #32
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e000      	b.n	80033a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033b0:	f7fd fd56 	bl	8000e60 <HAL_GetTick>
 80033b4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0220 	bic.w	r2, r2, #32
 80033c4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	2164      	movs	r1, #100	; 0x64
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff ffa6 	bl	800331c <SPI_EndRxTxTransaction>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d115      	bne.n	8003416 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d107      	bne.n	8003406 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff fd3a 	bl	8002e78 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003404:	e00e      	b.n	8003424 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fd faea 	bl	80009e8 <HAL_SPI_TxRxCpltCallback>
}
 8003414:	e006      	b.n	8003424 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff fd34 	bl	8002e8c <HAL_SPI_ErrorCallback>
}
 8003424:	bf00      	nop
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e042      	b.n	80034c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003444:	2b00      	cmp	r3, #0
 8003446:	d106      	bne.n	8003456 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7fd fb03 	bl	8000a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2224      	movs	r2, #36	; 0x24
 800345a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0201 	bic.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 ff48 	bl	800430c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fc49 	bl	8003d14 <UART_SetConfig>
 8003482:	4603      	mov	r3, r0
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e01b      	b.n	80034c4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800349a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 ffc7 	bl	8004450 <UART_CheckIdleState>
 80034c2:	4603      	mov	r3, r0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b091      	sub	sp, #68	; 0x44
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	4613      	mov	r3, r2
 80034d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d178      	bne.n	80035d6 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <HAL_UART_Transmit_IT+0x24>
 80034ea:	88fb      	ldrh	r3, [r7, #6]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e071      	b.n	80035d8 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	88fa      	ldrh	r2, [r7, #6]
 80034fe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	88fa      	ldrh	r2, [r7, #6]
 8003506:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2221      	movs	r2, #33	; 0x21
 800351c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003528:	d12a      	bne.n	8003580 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003532:	d107      	bne.n	8003544 <HAL_UART_Transmit_IT+0x78>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d103      	bne.n	8003544 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4a29      	ldr	r2, [pc, #164]	; (80035e4 <HAL_UART_Transmit_IT+0x118>)
 8003540:	679a      	str	r2, [r3, #120]	; 0x78
 8003542:	e002      	b.n	800354a <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4a28      	ldr	r2, [pc, #160]	; (80035e8 <HAL_UART_Transmit_IT+0x11c>)
 8003548:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3308      	adds	r3, #8
 8003550:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003554:	e853 3f00 	ldrex	r3, [r3]
 8003558:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003560:	63bb      	str	r3, [r7, #56]	; 0x38
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3308      	adds	r3, #8
 8003568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800356a:	637a      	str	r2, [r7, #52]	; 0x34
 800356c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003572:	e841 2300 	strex	r3, r2, [r1]
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1e5      	bne.n	800354a <HAL_UART_Transmit_IT+0x7e>
 800357e:	e028      	b.n	80035d2 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003588:	d107      	bne.n	800359a <HAL_UART_Transmit_IT+0xce>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d103      	bne.n	800359a <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	4a15      	ldr	r2, [pc, #84]	; (80035ec <HAL_UART_Transmit_IT+0x120>)
 8003596:	679a      	str	r2, [r3, #120]	; 0x78
 8003598:	e002      	b.n	80035a0 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4a14      	ldr	r2, [pc, #80]	; (80035f0 <HAL_UART_Transmit_IT+0x124>)
 800359e:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	e853 3f00 	ldrex	r3, [r3]
 80035ac:	613b      	str	r3, [r7, #16]
   return(result);
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035be:	623b      	str	r3, [r7, #32]
 80035c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c2:	69f9      	ldr	r1, [r7, #28]
 80035c4:	6a3a      	ldr	r2, [r7, #32]
 80035c6:	e841 2300 	strex	r3, r2, [r1]
 80035ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1e6      	bne.n	80035a0 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e000      	b.n	80035d8 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80035d6:	2302      	movs	r3, #2
  }
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3744      	adds	r7, #68	; 0x44
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	08004c17 	.word	0x08004c17
 80035e8:	08004b37 	.word	0x08004b37
 80035ec:	08004a75 	.word	0x08004a75
 80035f0:	080049bd 	.word	0x080049bd

080035f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08a      	sub	sp, #40	; 0x28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	4613      	mov	r3, r2
 8003600:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003608:	2b20      	cmp	r3, #32
 800360a:	d137      	bne.n	800367c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_UART_Receive_IT+0x24>
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e030      	b.n	800367e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a18      	ldr	r2, [pc, #96]	; (8003688 <HAL_UART_Receive_IT+0x94>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d01f      	beq.n	800366c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d018      	beq.n	800366c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	e853 3f00 	ldrex	r3, [r3]
 8003646:	613b      	str	r3, [r7, #16]
   return(result);
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	623b      	str	r3, [r7, #32]
 800365a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365c:	69f9      	ldr	r1, [r7, #28]
 800365e:	6a3a      	ldr	r2, [r7, #32]
 8003660:	e841 2300 	strex	r3, r2, [r1]
 8003664:	61bb      	str	r3, [r7, #24]
   return(result);
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e6      	bne.n	800363a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	461a      	mov	r2, r3
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f001 f804 	bl	8004680 <UART_Start_Receive_IT>
 8003678:	4603      	mov	r3, r0
 800367a:	e000      	b.n	800367e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800367c:	2302      	movs	r3, #2
  }
}
 800367e:	4618      	mov	r0, r3
 8003680:	3728      	adds	r7, #40	; 0x28
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40008000 	.word	0x40008000

0800368c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b0ba      	sub	sp, #232	; 0xe8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80036b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80036b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80036ba:	4013      	ands	r3, r2
 80036bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80036c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d11b      	bne.n	8003700 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80036c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d015      	beq.n	8003700 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80036d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d105      	bne.n	80036ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80036e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d009      	beq.n	8003700 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 82e3 	beq.w	8003cbc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4798      	blx	r3
      }
      return;
 80036fe:	e2dd      	b.n	8003cbc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003700:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 8123 	beq.w	8003950 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800370a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800370e:	4b8d      	ldr	r3, [pc, #564]	; (8003944 <HAL_UART_IRQHandler+0x2b8>)
 8003710:	4013      	ands	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003716:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800371a:	4b8b      	ldr	r3, [pc, #556]	; (8003948 <HAL_UART_IRQHandler+0x2bc>)
 800371c:	4013      	ands	r3, r2
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 8116 	beq.w	8003950 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d011      	beq.n	8003754 <HAL_UART_IRQHandler+0xc8>
 8003730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00b      	beq.n	8003754 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2201      	movs	r2, #1
 8003742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374a:	f043 0201 	orr.w	r2, r3, #1
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d011      	beq.n	8003784 <HAL_UART_IRQHandler+0xf8>
 8003760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00b      	beq.n	8003784 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2202      	movs	r2, #2
 8003772:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377a:	f043 0204 	orr.w	r2, r3, #4
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d011      	beq.n	80037b4 <HAL_UART_IRQHandler+0x128>
 8003790:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00b      	beq.n	80037b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2204      	movs	r2, #4
 80037a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037aa:	f043 0202 	orr.w	r2, r3, #2
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80037b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d017      	beq.n	80037f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80037c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d105      	bne.n	80037d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80037cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80037d0:	4b5c      	ldr	r3, [pc, #368]	; (8003944 <HAL_UART_IRQHandler+0x2b8>)
 80037d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00b      	beq.n	80037f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2208      	movs	r2, #8
 80037de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f043 0208 	orr.w	r2, r3, #8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80037f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d012      	beq.n	8003822 <HAL_UART_IRQHandler+0x196>
 80037fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003800:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00c      	beq.n	8003822 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003810:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003818:	f043 0220 	orr.w	r2, r3, #32
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 8249 	beq.w	8003cc0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800382e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003832:	f003 0320 	and.w	r3, r3, #32
 8003836:	2b00      	cmp	r3, #0
 8003838:	d013      	beq.n	8003862 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800383a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b00      	cmp	r3, #0
 8003844:	d105      	bne.n	8003852 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800384a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003876:	2b40      	cmp	r3, #64	; 0x40
 8003878:	d005      	beq.n	8003886 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800387a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800387e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003882:	2b00      	cmp	r3, #0
 8003884:	d054      	beq.n	8003930 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f001 f81c 	bl	80048c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003896:	2b40      	cmp	r3, #64	; 0x40
 8003898:	d146      	bne.n	8003928 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3308      	adds	r3, #8
 80038a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038a8:	e853 3f00 	ldrex	r3, [r3]
 80038ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80038b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3308      	adds	r3, #8
 80038c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80038c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80038ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80038d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80038d6:	e841 2300 	strex	r3, r2, [r1]
 80038da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1d9      	bne.n	800389a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d017      	beq.n	8003920 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038f6:	4a15      	ldr	r2, [pc, #84]	; (800394c <HAL_UART_IRQHandler+0x2c0>)
 80038f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003900:	4618      	mov	r0, r3
 8003902:	f7fd fcec 	bl	80012de <HAL_DMA_Abort_IT>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d019      	beq.n	8003940 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800391a:	4610      	mov	r0, r2
 800391c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800391e:	e00f      	b.n	8003940 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f9e1 	bl	8003ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003926:	e00b      	b.n	8003940 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 f9dd 	bl	8003ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800392e:	e007      	b.n	8003940 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f9d9 	bl	8003ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800393e:	e1bf      	b.n	8003cc0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003940:	bf00      	nop
    return;
 8003942:	e1bd      	b.n	8003cc0 <HAL_UART_IRQHandler+0x634>
 8003944:	10000001 	.word	0x10000001
 8003948:	04000120 	.word	0x04000120
 800394c:	08004991 	.word	0x08004991

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003954:	2b01      	cmp	r3, #1
 8003956:	f040 8153 	bne.w	8003c00 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800395a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 814c 	beq.w	8003c00 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 8145 	beq.w	8003c00 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2210      	movs	r2, #16
 800397c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003988:	2b40      	cmp	r3, #64	; 0x40
 800398a:	f040 80bb 	bne.w	8003b04 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800399c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 818f 	beq.w	8003cc4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80039ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039b0:	429a      	cmp	r2, r3
 80039b2:	f080 8187 	bcs.w	8003cc4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f040 8087 	bne.w	8003ae2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80039e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	461a      	mov	r2, r3
 80039fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80039fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a02:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a0e:	e841 2300 	strex	r3, r2, [r1]
 8003a12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1da      	bne.n	80039d4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3308      	adds	r3, #8
 8003a24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a28:	e853 3f00 	ldrex	r3, [r3]
 8003a2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a30:	f023 0301 	bic.w	r3, r3, #1
 8003a34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1e1      	bne.n	8003a1e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	3308      	adds	r3, #8
 8003a60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a64:	e853 3f00 	ldrex	r3, [r3]
 8003a68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3308      	adds	r3, #8
 8003a7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1e3      	bne.n	8003a5a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
 8003aac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ab0:	f023 0310 	bic.w	r3, r3, #16
 8003ab4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ac2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ac4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ac8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e4      	bne.n	8003aa0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fd fba5 	bl	800122c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	4619      	mov	r1, r3
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f8fd 	bl	8003cfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b02:	e0df      	b.n	8003cc4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 80d1 	beq.w	8003cc8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003b26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 80cc 	beq.w	8003cc8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b52:	647b      	str	r3, [r7, #68]	; 0x44
 8003b54:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b5a:	e841 2300 	strex	r3, r2, [r1]
 8003b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1e4      	bne.n	8003b30 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3308      	adds	r3, #8
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	e853 3f00 	ldrex	r3, [r3]
 8003b74:	623b      	str	r3, [r7, #32]
   return(result);
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	f023 0301 	bic.w	r3, r3, #1
 8003b80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3308      	adds	r3, #8
 8003b8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b8e:	633a      	str	r2, [r7, #48]	; 0x30
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b96:	e841 2300 	strex	r3, r2, [r1]
 8003b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1e1      	bne.n	8003b66 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	e853 3f00 	ldrex	r3, [r3]
 8003bc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0310 	bic.w	r3, r3, #16
 8003bca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bd8:	61fb      	str	r3, [r7, #28]
 8003bda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	69b9      	ldr	r1, [r7, #24]
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	617b      	str	r3, [r7, #20]
   return(result);
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e4      	bne.n	8003bb6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bf2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 f87f 	bl	8003cfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bfe:	e063      	b.n	8003cc8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00e      	beq.n	8003c2a <HAL_UART_IRQHandler+0x59e>
 8003c0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003c20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f001 fdb4 	bl	8005790 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c28:	e051      	b.n	8003cce <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d014      	beq.n	8003c60 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d105      	bne.n	8003c4e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d03a      	beq.n	8003ccc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	4798      	blx	r3
    }
    return;
 8003c5e:	e035      	b.n	8003ccc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d009      	beq.n	8003c80 <HAL_UART_IRQHandler+0x5f4>
 8003c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f001 f841 	bl	8004d00 <UART_EndTransmit_IT>
    return;
 8003c7e:	e026      	b.n	8003cce <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d009      	beq.n	8003ca0 <HAL_UART_IRQHandler+0x614>
 8003c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f001 fd8d 	bl	80057b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003c9e:	e016      	b.n	8003cce <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d010      	beq.n	8003cce <HAL_UART_IRQHandler+0x642>
 8003cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	da0c      	bge.n	8003cce <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f001 fd75 	bl	80057a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cba:	e008      	b.n	8003cce <HAL_UART_IRQHandler+0x642>
      return;
 8003cbc:	bf00      	nop
 8003cbe:	e006      	b.n	8003cce <HAL_UART_IRQHandler+0x642>
    return;
 8003cc0:	bf00      	nop
 8003cc2:	e004      	b.n	8003cce <HAL_UART_IRQHandler+0x642>
      return;
 8003cc4:	bf00      	nop
 8003cc6:	e002      	b.n	8003cce <HAL_UART_IRQHandler+0x642>
      return;
 8003cc8:	bf00      	nop
 8003cca:	e000      	b.n	8003cce <HAL_UART_IRQHandler+0x642>
    return;
 8003ccc:	bf00      	nop
  }
}
 8003cce:	37e8      	adds	r7, #232	; 0xe8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d18:	b08c      	sub	sp, #48	; 0x30
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4baa      	ldr	r3, [pc, #680]	; (8003fec <UART_SetConfig+0x2d8>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a9f      	ldr	r2, [pc, #636]	; (8003ff0 <UART_SetConfig+0x2dc>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d004      	beq.n	8003d80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003d8a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d94:	430b      	orrs	r3, r1
 8003d96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9e:	f023 010f 	bic.w	r1, r3, #15
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a90      	ldr	r2, [pc, #576]	; (8003ff4 <UART_SetConfig+0x2e0>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d125      	bne.n	8003e04 <UART_SetConfig+0xf0>
 8003db8:	4b8f      	ldr	r3, [pc, #572]	; (8003ff8 <UART_SetConfig+0x2e4>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d81a      	bhi.n	8003dfc <UART_SetConfig+0xe8>
 8003dc6:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <UART_SetConfig+0xb8>)
 8003dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dcc:	08003ddd 	.word	0x08003ddd
 8003dd0:	08003ded 	.word	0x08003ded
 8003dd4:	08003de5 	.word	0x08003de5
 8003dd8:	08003df5 	.word	0x08003df5
 8003ddc:	2301      	movs	r3, #1
 8003dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003de2:	e116      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003de4:	2302      	movs	r3, #2
 8003de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dea:	e112      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003dec:	2304      	movs	r3, #4
 8003dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003df2:	e10e      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003df4:	2308      	movs	r3, #8
 8003df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dfa:	e10a      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003dfc:	2310      	movs	r3, #16
 8003dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e02:	e106      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a7c      	ldr	r2, [pc, #496]	; (8003ffc <UART_SetConfig+0x2e8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d138      	bne.n	8003e80 <UART_SetConfig+0x16c>
 8003e0e:	4b7a      	ldr	r3, [pc, #488]	; (8003ff8 <UART_SetConfig+0x2e4>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	f003 030c 	and.w	r3, r3, #12
 8003e18:	2b0c      	cmp	r3, #12
 8003e1a:	d82d      	bhi.n	8003e78 <UART_SetConfig+0x164>
 8003e1c:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <UART_SetConfig+0x110>)
 8003e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e22:	bf00      	nop
 8003e24:	08003e59 	.word	0x08003e59
 8003e28:	08003e79 	.word	0x08003e79
 8003e2c:	08003e79 	.word	0x08003e79
 8003e30:	08003e79 	.word	0x08003e79
 8003e34:	08003e69 	.word	0x08003e69
 8003e38:	08003e79 	.word	0x08003e79
 8003e3c:	08003e79 	.word	0x08003e79
 8003e40:	08003e79 	.word	0x08003e79
 8003e44:	08003e61 	.word	0x08003e61
 8003e48:	08003e79 	.word	0x08003e79
 8003e4c:	08003e79 	.word	0x08003e79
 8003e50:	08003e79 	.word	0x08003e79
 8003e54:	08003e71 	.word	0x08003e71
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e5e:	e0d8      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003e60:	2302      	movs	r3, #2
 8003e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e66:	e0d4      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003e68:	2304      	movs	r3, #4
 8003e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e6e:	e0d0      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003e70:	2308      	movs	r3, #8
 8003e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e76:	e0cc      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003e78:	2310      	movs	r3, #16
 8003e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e7e:	e0c8      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a5e      	ldr	r2, [pc, #376]	; (8004000 <UART_SetConfig+0x2ec>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d125      	bne.n	8003ed6 <UART_SetConfig+0x1c2>
 8003e8a:	4b5b      	ldr	r3, [pc, #364]	; (8003ff8 <UART_SetConfig+0x2e4>)
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e94:	2b30      	cmp	r3, #48	; 0x30
 8003e96:	d016      	beq.n	8003ec6 <UART_SetConfig+0x1b2>
 8003e98:	2b30      	cmp	r3, #48	; 0x30
 8003e9a:	d818      	bhi.n	8003ece <UART_SetConfig+0x1ba>
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d00a      	beq.n	8003eb6 <UART_SetConfig+0x1a2>
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d814      	bhi.n	8003ece <UART_SetConfig+0x1ba>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <UART_SetConfig+0x19a>
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d008      	beq.n	8003ebe <UART_SetConfig+0x1aa>
 8003eac:	e00f      	b.n	8003ece <UART_SetConfig+0x1ba>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eb4:	e0ad      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ebc:	e0a9      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003ebe:	2304      	movs	r3, #4
 8003ec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ec4:	e0a5      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003ec6:	2308      	movs	r3, #8
 8003ec8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ecc:	e0a1      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003ece:	2310      	movs	r3, #16
 8003ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ed4:	e09d      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a4a      	ldr	r2, [pc, #296]	; (8004004 <UART_SetConfig+0x2f0>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d125      	bne.n	8003f2c <UART_SetConfig+0x218>
 8003ee0:	4b45      	ldr	r3, [pc, #276]	; (8003ff8 <UART_SetConfig+0x2e4>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003eea:	2bc0      	cmp	r3, #192	; 0xc0
 8003eec:	d016      	beq.n	8003f1c <UART_SetConfig+0x208>
 8003eee:	2bc0      	cmp	r3, #192	; 0xc0
 8003ef0:	d818      	bhi.n	8003f24 <UART_SetConfig+0x210>
 8003ef2:	2b80      	cmp	r3, #128	; 0x80
 8003ef4:	d00a      	beq.n	8003f0c <UART_SetConfig+0x1f8>
 8003ef6:	2b80      	cmp	r3, #128	; 0x80
 8003ef8:	d814      	bhi.n	8003f24 <UART_SetConfig+0x210>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <UART_SetConfig+0x1f0>
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d008      	beq.n	8003f14 <UART_SetConfig+0x200>
 8003f02:	e00f      	b.n	8003f24 <UART_SetConfig+0x210>
 8003f04:	2300      	movs	r3, #0
 8003f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f0a:	e082      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f12:	e07e      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003f14:	2304      	movs	r3, #4
 8003f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f1a:	e07a      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003f1c:	2308      	movs	r3, #8
 8003f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f22:	e076      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003f24:	2310      	movs	r3, #16
 8003f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f2a:	e072      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a35      	ldr	r2, [pc, #212]	; (8004008 <UART_SetConfig+0x2f4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d12a      	bne.n	8003f8c <UART_SetConfig+0x278>
 8003f36:	4b30      	ldr	r3, [pc, #192]	; (8003ff8 <UART_SetConfig+0x2e4>)
 8003f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f44:	d01a      	beq.n	8003f7c <UART_SetConfig+0x268>
 8003f46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f4a:	d81b      	bhi.n	8003f84 <UART_SetConfig+0x270>
 8003f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f50:	d00c      	beq.n	8003f6c <UART_SetConfig+0x258>
 8003f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f56:	d815      	bhi.n	8003f84 <UART_SetConfig+0x270>
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <UART_SetConfig+0x250>
 8003f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f60:	d008      	beq.n	8003f74 <UART_SetConfig+0x260>
 8003f62:	e00f      	b.n	8003f84 <UART_SetConfig+0x270>
 8003f64:	2300      	movs	r3, #0
 8003f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f6a:	e052      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f72:	e04e      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003f74:	2304      	movs	r3, #4
 8003f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f7a:	e04a      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003f7c:	2308      	movs	r3, #8
 8003f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f82:	e046      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003f84:	2310      	movs	r3, #16
 8003f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f8a:	e042      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a17      	ldr	r2, [pc, #92]	; (8003ff0 <UART_SetConfig+0x2dc>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d13a      	bne.n	800400c <UART_SetConfig+0x2f8>
 8003f96:	4b18      	ldr	r3, [pc, #96]	; (8003ff8 <UART_SetConfig+0x2e4>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fa0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fa4:	d01a      	beq.n	8003fdc <UART_SetConfig+0x2c8>
 8003fa6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003faa:	d81b      	bhi.n	8003fe4 <UART_SetConfig+0x2d0>
 8003fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb0:	d00c      	beq.n	8003fcc <UART_SetConfig+0x2b8>
 8003fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb6:	d815      	bhi.n	8003fe4 <UART_SetConfig+0x2d0>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <UART_SetConfig+0x2b0>
 8003fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc0:	d008      	beq.n	8003fd4 <UART_SetConfig+0x2c0>
 8003fc2:	e00f      	b.n	8003fe4 <UART_SetConfig+0x2d0>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fca:	e022      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fd2:	e01e      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fda:	e01a      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003fdc:	2308      	movs	r3, #8
 8003fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fe2:	e016      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003fe4:	2310      	movs	r3, #16
 8003fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fea:	e012      	b.n	8004012 <UART_SetConfig+0x2fe>
 8003fec:	cfff69f3 	.word	0xcfff69f3
 8003ff0:	40008000 	.word	0x40008000
 8003ff4:	40013800 	.word	0x40013800
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40004400 	.word	0x40004400
 8004000:	40004800 	.word	0x40004800
 8004004:	40004c00 	.word	0x40004c00
 8004008:	40005000 	.word	0x40005000
 800400c:	2310      	movs	r3, #16
 800400e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4aae      	ldr	r2, [pc, #696]	; (80042d0 <UART_SetConfig+0x5bc>)
 8004018:	4293      	cmp	r3, r2
 800401a:	f040 8097 	bne.w	800414c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800401e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004022:	2b08      	cmp	r3, #8
 8004024:	d823      	bhi.n	800406e <UART_SetConfig+0x35a>
 8004026:	a201      	add	r2, pc, #4	; (adr r2, 800402c <UART_SetConfig+0x318>)
 8004028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402c:	08004051 	.word	0x08004051
 8004030:	0800406f 	.word	0x0800406f
 8004034:	08004059 	.word	0x08004059
 8004038:	0800406f 	.word	0x0800406f
 800403c:	0800405f 	.word	0x0800405f
 8004040:	0800406f 	.word	0x0800406f
 8004044:	0800406f 	.word	0x0800406f
 8004048:	0800406f 	.word	0x0800406f
 800404c:	08004067 	.word	0x08004067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004050:	f7fe fa04 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8004054:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004056:	e010      	b.n	800407a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004058:	4b9e      	ldr	r3, [pc, #632]	; (80042d4 <UART_SetConfig+0x5c0>)
 800405a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800405c:	e00d      	b.n	800407a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800405e:	f7fe f98f 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 8004062:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004064:	e009      	b.n	800407a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800406a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800406c:	e005      	b.n	800407a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004078:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 8130 	beq.w	80042e2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	4a94      	ldr	r2, [pc, #592]	; (80042d8 <UART_SetConfig+0x5c4>)
 8004088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800408c:	461a      	mov	r2, r3
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	fbb3 f3f2 	udiv	r3, r3, r2
 8004094:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	4413      	add	r3, r2
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d305      	bcc.n	80040b2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d903      	bls.n	80040ba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80040b8:	e113      	b.n	80042e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	2200      	movs	r2, #0
 80040be:	60bb      	str	r3, [r7, #8]
 80040c0:	60fa      	str	r2, [r7, #12]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	4a84      	ldr	r2, [pc, #528]	; (80042d8 <UART_SetConfig+0x5c4>)
 80040c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2200      	movs	r2, #0
 80040d0:	603b      	str	r3, [r7, #0]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040dc:	f7fc f89c 	bl	8000218 <__aeabi_uldivmod>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4610      	mov	r0, r2
 80040e6:	4619      	mov	r1, r3
 80040e8:	f04f 0200 	mov.w	r2, #0
 80040ec:	f04f 0300 	mov.w	r3, #0
 80040f0:	020b      	lsls	r3, r1, #8
 80040f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040f6:	0202      	lsls	r2, r0, #8
 80040f8:	6979      	ldr	r1, [r7, #20]
 80040fa:	6849      	ldr	r1, [r1, #4]
 80040fc:	0849      	lsrs	r1, r1, #1
 80040fe:	2000      	movs	r0, #0
 8004100:	460c      	mov	r4, r1
 8004102:	4605      	mov	r5, r0
 8004104:	eb12 0804 	adds.w	r8, r2, r4
 8004108:	eb43 0905 	adc.w	r9, r3, r5
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	469a      	mov	sl, r3
 8004114:	4693      	mov	fp, r2
 8004116:	4652      	mov	r2, sl
 8004118:	465b      	mov	r3, fp
 800411a:	4640      	mov	r0, r8
 800411c:	4649      	mov	r1, r9
 800411e:	f7fc f87b 	bl	8000218 <__aeabi_uldivmod>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4613      	mov	r3, r2
 8004128:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004130:	d308      	bcc.n	8004144 <UART_SetConfig+0x430>
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004138:	d204      	bcs.n	8004144 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6a3a      	ldr	r2, [r7, #32]
 8004140:	60da      	str	r2, [r3, #12]
 8004142:	e0ce      	b.n	80042e2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800414a:	e0ca      	b.n	80042e2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004154:	d166      	bne.n	8004224 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004156:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800415a:	2b08      	cmp	r3, #8
 800415c:	d827      	bhi.n	80041ae <UART_SetConfig+0x49a>
 800415e:	a201      	add	r2, pc, #4	; (adr r2, 8004164 <UART_SetConfig+0x450>)
 8004160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004164:	08004189 	.word	0x08004189
 8004168:	08004191 	.word	0x08004191
 800416c:	08004199 	.word	0x08004199
 8004170:	080041af 	.word	0x080041af
 8004174:	0800419f 	.word	0x0800419f
 8004178:	080041af 	.word	0x080041af
 800417c:	080041af 	.word	0x080041af
 8004180:	080041af 	.word	0x080041af
 8004184:	080041a7 	.word	0x080041a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004188:	f7fe f968 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 800418c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800418e:	e014      	b.n	80041ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004190:	f7fe f97a 	bl	8002488 <HAL_RCC_GetPCLK2Freq>
 8004194:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004196:	e010      	b.n	80041ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004198:	4b4e      	ldr	r3, [pc, #312]	; (80042d4 <UART_SetConfig+0x5c0>)
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800419c:	e00d      	b.n	80041ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800419e:	f7fe f8ef 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 80041a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041a4:	e009      	b.n	80041ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80041ac:	e005      	b.n	80041ba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80041b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 8090 	beq.w	80042e2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	4a44      	ldr	r2, [pc, #272]	; (80042d8 <UART_SetConfig+0x5c4>)
 80041c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041cc:	461a      	mov	r2, r3
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80041d4:	005a      	lsls	r2, r3, #1
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	085b      	lsrs	r3, r3, #1
 80041dc:	441a      	add	r2, r3
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	2b0f      	cmp	r3, #15
 80041ec:	d916      	bls.n	800421c <UART_SetConfig+0x508>
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f4:	d212      	bcs.n	800421c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	f023 030f 	bic.w	r3, r3, #15
 80041fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	b29b      	uxth	r3, r3
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	b29a      	uxth	r2, r3
 800420c:	8bfb      	ldrh	r3, [r7, #30]
 800420e:	4313      	orrs	r3, r2
 8004210:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	8bfa      	ldrh	r2, [r7, #30]
 8004218:	60da      	str	r2, [r3, #12]
 800421a:	e062      	b.n	80042e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004222:	e05e      	b.n	80042e2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004224:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004228:	2b08      	cmp	r3, #8
 800422a:	d828      	bhi.n	800427e <UART_SetConfig+0x56a>
 800422c:	a201      	add	r2, pc, #4	; (adr r2, 8004234 <UART_SetConfig+0x520>)
 800422e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004232:	bf00      	nop
 8004234:	08004259 	.word	0x08004259
 8004238:	08004261 	.word	0x08004261
 800423c:	08004269 	.word	0x08004269
 8004240:	0800427f 	.word	0x0800427f
 8004244:	0800426f 	.word	0x0800426f
 8004248:	0800427f 	.word	0x0800427f
 800424c:	0800427f 	.word	0x0800427f
 8004250:	0800427f 	.word	0x0800427f
 8004254:	08004277 	.word	0x08004277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004258:	f7fe f900 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 800425c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800425e:	e014      	b.n	800428a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004260:	f7fe f912 	bl	8002488 <HAL_RCC_GetPCLK2Freq>
 8004264:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004266:	e010      	b.n	800428a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004268:	4b1a      	ldr	r3, [pc, #104]	; (80042d4 <UART_SetConfig+0x5c0>)
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800426c:	e00d      	b.n	800428a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800426e:	f7fe f887 	bl	8002380 <HAL_RCC_GetSysClockFreq>
 8004272:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004274:	e009      	b.n	800428a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800427c:	e005      	b.n	800428a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004288:	bf00      	nop
    }

    if (pclk != 0U)
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	2b00      	cmp	r3, #0
 800428e:	d028      	beq.n	80042e2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	4a10      	ldr	r2, [pc, #64]	; (80042d8 <UART_SetConfig+0x5c4>)
 8004296:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800429a:	461a      	mov	r2, r3
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	fbb3 f2f2 	udiv	r2, r3, r2
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	085b      	lsrs	r3, r3, #1
 80042a8:	441a      	add	r2, r3
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	2b0f      	cmp	r3, #15
 80042b8:	d910      	bls.n	80042dc <UART_SetConfig+0x5c8>
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c0:	d20c      	bcs.n	80042dc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60da      	str	r2, [r3, #12]
 80042cc:	e009      	b.n	80042e2 <UART_SetConfig+0x5ce>
 80042ce:	bf00      	nop
 80042d0:	40008000 	.word	0x40008000
 80042d4:	00f42400 	.word	0x00f42400
 80042d8:	08005a5c 	.word	0x08005a5c
      }
      else
      {
        ret = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2200      	movs	r2, #0
 80042f6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	2200      	movs	r2, #0
 80042fc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80042fe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004302:	4618      	mov	r0, r3
 8004304:	3730      	adds	r7, #48	; 0x30
 8004306:	46bd      	mov	sp, r7
 8004308:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800430c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00a      	beq.n	800437a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00a      	beq.n	80043be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	430a      	orrs	r2, r1
 80043bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d01a      	beq.n	8004422 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800440a:	d10a      	bne.n	8004422 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	605a      	str	r2, [r3, #4]
  }
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b098      	sub	sp, #96	; 0x60
 8004454:	af02      	add	r7, sp, #8
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004460:	f7fc fcfe 	bl	8000e60 <HAL_GetTick>
 8004464:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b08      	cmp	r3, #8
 8004472:	d12f      	bne.n	80044d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004474:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800447c:	2200      	movs	r2, #0
 800447e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f88e 	bl	80045a4 <UART_WaitOnFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d022      	beq.n	80044d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800449c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044a2:	653b      	str	r3, [r7, #80]	; 0x50
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ac:	647b      	str	r3, [r7, #68]	; 0x44
 80044ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e6      	bne.n	800448e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e063      	b.n	800459c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0304 	and.w	r3, r3, #4
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d149      	bne.n	8004576 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ea:	2200      	movs	r2, #0
 80044ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 f857 	bl	80045a4 <UART_WaitOnFlagUntilTimeout>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d03c      	beq.n	8004576 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	623b      	str	r3, [r7, #32]
   return(result);
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004510:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	461a      	mov	r2, r3
 8004518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800451a:	633b      	str	r3, [r7, #48]	; 0x30
 800451c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e6      	bne.n	80044fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3308      	adds	r3, #8
 8004534:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	e853 3f00 	ldrex	r3, [r3]
 800453c:	60fb      	str	r3, [r7, #12]
   return(result);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	64bb      	str	r3, [r7, #72]	; 0x48
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3308      	adds	r3, #8
 800454c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800454e:	61fa      	str	r2, [r7, #28]
 8004550:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004552:	69b9      	ldr	r1, [r7, #24]
 8004554:	69fa      	ldr	r2, [r7, #28]
 8004556:	e841 2300 	strex	r3, r2, [r1]
 800455a:	617b      	str	r3, [r7, #20]
   return(result);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1e5      	bne.n	800452e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2220      	movs	r2, #32
 8004566:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e012      	b.n	800459c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3758      	adds	r7, #88	; 0x58
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	4613      	mov	r3, r2
 80045b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045b4:	e04f      	b.n	8004656 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045bc:	d04b      	beq.n	8004656 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045be:	f7fc fc4f 	bl	8000e60 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d302      	bcc.n	80045d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e04e      	b.n	8004676 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d037      	beq.n	8004656 <UART_WaitOnFlagUntilTimeout+0xb2>
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b80      	cmp	r3, #128	; 0x80
 80045ea:	d034      	beq.n	8004656 <UART_WaitOnFlagUntilTimeout+0xb2>
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	d031      	beq.n	8004656 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d110      	bne.n	8004622 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2208      	movs	r2, #8
 8004606:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 f95b 	bl	80048c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2208      	movs	r2, #8
 8004612:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e029      	b.n	8004676 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800462c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004630:	d111      	bne.n	8004656 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800463a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 f941 	bl	80048c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2220      	movs	r2, #32
 8004646:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e00f      	b.n	8004676 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69da      	ldr	r2, [r3, #28]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4013      	ands	r3, r2
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	429a      	cmp	r2, r3
 8004664:	bf0c      	ite	eq
 8004666:	2301      	moveq	r3, #1
 8004668:	2300      	movne	r3, #0
 800466a:	b2db      	uxtb	r3, r3
 800466c:	461a      	mov	r2, r3
 800466e:	79fb      	ldrb	r3, [r7, #7]
 8004670:	429a      	cmp	r2, r3
 8004672:	d0a0      	beq.n	80045b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004680:	b480      	push	{r7}
 8004682:	b0a3      	sub	sp, #140	; 0x8c
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	4613      	mov	r3, r2
 800468c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	88fa      	ldrh	r2, [r7, #6]
 8004698:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	88fa      	ldrh	r2, [r7, #6]
 80046a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b2:	d10e      	bne.n	80046d2 <UART_Start_Receive_IT+0x52>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d105      	bne.n	80046c8 <UART_Start_Receive_IT+0x48>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80046c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80046c6:	e02d      	b.n	8004724 <UART_Start_Receive_IT+0xa4>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	22ff      	movs	r2, #255	; 0xff
 80046cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80046d0:	e028      	b.n	8004724 <UART_Start_Receive_IT+0xa4>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10d      	bne.n	80046f6 <UART_Start_Receive_IT+0x76>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d104      	bne.n	80046ec <UART_Start_Receive_IT+0x6c>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	22ff      	movs	r2, #255	; 0xff
 80046e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80046ea:	e01b      	b.n	8004724 <UART_Start_Receive_IT+0xa4>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	227f      	movs	r2, #127	; 0x7f
 80046f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80046f4:	e016      	b.n	8004724 <UART_Start_Receive_IT+0xa4>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046fe:	d10d      	bne.n	800471c <UART_Start_Receive_IT+0x9c>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <UART_Start_Receive_IT+0x92>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	227f      	movs	r2, #127	; 0x7f
 800470c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004710:	e008      	b.n	8004724 <UART_Start_Receive_IT+0xa4>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	223f      	movs	r2, #63	; 0x3f
 8004716:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800471a:	e003      	b.n	8004724 <UART_Start_Receive_IT+0xa4>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2222      	movs	r2, #34	; 0x22
 8004730:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3308      	adds	r3, #8
 800473a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800473e:	e853 3f00 	ldrex	r3, [r3]
 8004742:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004744:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004746:	f043 0301 	orr.w	r3, r3, #1
 800474a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3308      	adds	r3, #8
 8004754:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004758:	673a      	str	r2, [r7, #112]	; 0x70
 800475a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800475e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004760:	e841 2300 	strex	r3, r2, [r1]
 8004764:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004766:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e3      	bne.n	8004734 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004774:	d14f      	bne.n	8004816 <UART_Start_Receive_IT+0x196>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800477c:	88fa      	ldrh	r2, [r7, #6]
 800477e:	429a      	cmp	r2, r3
 8004780:	d349      	bcc.n	8004816 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800478a:	d107      	bne.n	800479c <UART_Start_Receive_IT+0x11c>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d103      	bne.n	800479c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4a47      	ldr	r2, [pc, #284]	; (80048b4 <UART_Start_Receive_IT+0x234>)
 8004798:	675a      	str	r2, [r3, #116]	; 0x74
 800479a:	e002      	b.n	80047a2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4a46      	ldr	r2, [pc, #280]	; (80048b8 <UART_Start_Receive_IT+0x238>)
 80047a0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d01a      	beq.n	80047e0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b2:	e853 3f00 	ldrex	r3, [r3]
 80047b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047ce:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047d4:	e841 2300 	strex	r3, r2, [r1]
 80047d8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80047da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1e4      	bne.n	80047aa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3308      	adds	r3, #8
 80047e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3308      	adds	r3, #8
 80047fe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004800:	64ba      	str	r2, [r7, #72]	; 0x48
 8004802:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004806:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800480e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e5      	bne.n	80047e0 <UART_Start_Receive_IT+0x160>
 8004814:	e046      	b.n	80048a4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481e:	d107      	bne.n	8004830 <UART_Start_Receive_IT+0x1b0>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d103      	bne.n	8004830 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4a24      	ldr	r2, [pc, #144]	; (80048bc <UART_Start_Receive_IT+0x23c>)
 800482c:	675a      	str	r2, [r3, #116]	; 0x74
 800482e:	e002      	b.n	8004836 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4a23      	ldr	r2, [pc, #140]	; (80048c0 <UART_Start_Receive_IT+0x240>)
 8004834:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d019      	beq.n	8004872 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004852:	677b      	str	r3, [r7, #116]	; 0x74
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800485c:	637b      	str	r3, [r7, #52]	; 0x34
 800485e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800486a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e6      	bne.n	800483e <UART_Start_Receive_IT+0x1be>
 8004870:	e018      	b.n	80048a4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	e853 3f00 	ldrex	r3, [r3]
 800487e:	613b      	str	r3, [r7, #16]
   return(result);
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f043 0320 	orr.w	r3, r3, #32
 8004886:	67bb      	str	r3, [r7, #120]	; 0x78
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	461a      	mov	r2, r3
 800488e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004890:	623b      	str	r3, [r7, #32]
 8004892:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	69f9      	ldr	r1, [r7, #28]
 8004896:	6a3a      	ldr	r2, [r7, #32]
 8004898:	e841 2300 	strex	r3, r2, [r1]
 800489c:	61bb      	str	r3, [r7, #24]
   return(result);
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e6      	bne.n	8004872 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	378c      	adds	r7, #140	; 0x8c
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	08005429 	.word	0x08005429
 80048b8:	080050c9 	.word	0x080050c9
 80048bc:	08004f11 	.word	0x08004f11
 80048c0:	08004d59 	.word	0x08004d59

080048c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b095      	sub	sp, #84	; 0x54
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ea:	643b      	str	r3, [r7, #64]	; 0x40
 80048ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048f2:	e841 2300 	strex	r3, r2, [r1]
 80048f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1e6      	bne.n	80048cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3308      	adds	r3, #8
 8004904:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	e853 3f00 	ldrex	r3, [r3]
 800490c:	61fb      	str	r3, [r7, #28]
   return(result);
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	64bb      	str	r3, [r7, #72]	; 0x48
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3308      	adds	r3, #8
 8004920:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004922:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004924:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004926:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1e3      	bne.n	80048fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800493a:	2b01      	cmp	r3, #1
 800493c:	d118      	bne.n	8004970 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	60bb      	str	r3, [r7, #8]
   return(result);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f023 0310 	bic.w	r3, r3, #16
 8004952:	647b      	str	r3, [r7, #68]	; 0x44
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	6979      	ldr	r1, [r7, #20]
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	613b      	str	r3, [r7, #16]
   return(result);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e6      	bne.n	800493e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004984:	bf00      	nop
 8004986:	3754      	adds	r7, #84	; 0x54
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f7ff f99a 	bl	8003ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049b4:	bf00      	nop
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80049bc:	b480      	push	{r7}
 80049be:	b08f      	sub	sp, #60	; 0x3c
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ca:	2b21      	cmp	r3, #33	; 0x21
 80049cc:	d14c      	bne.n	8004a68 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d132      	bne.n	8004a40 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	e853 3f00 	ldrex	r3, [r3]
 80049e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ee:	637b      	str	r3, [r7, #52]	; 0x34
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049fa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a00:	e841 2300 	strex	r3, r2, [r1]
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e6      	bne.n	80049da <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a20:	633b      	str	r3, [r7, #48]	; 0x30
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2a:	61bb      	str	r3, [r7, #24]
 8004a2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2e:	6979      	ldr	r1, [r7, #20]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	613b      	str	r3, [r7, #16]
   return(result);
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e6      	bne.n	8004a0c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004a3e:	e013      	b.n	8004a68 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a44:	781a      	ldrb	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8004a68:	bf00      	nop
 8004a6a:	373c      	adds	r7, #60	; 0x3c
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b091      	sub	sp, #68	; 0x44
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	2b21      	cmp	r3, #33	; 0x21
 8004a84:	d151      	bne.n	8004b2a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d132      	bne.n	8004af8 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	623b      	str	r3, [r7, #32]
   return(result);
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ab2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e6      	bne.n	8004a92 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae6:	69b9      	ldr	r1, [r7, #24]
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	617b      	str	r3, [r7, #20]
   return(result);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e6      	bne.n	8004ac4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004af6:	e018      	b.n	8004b2a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004afc:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b0c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b12:	1c9a      	adds	r2, r3, #2
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8004b2a:	bf00      	nop
 8004b2c:	3744      	adds	r7, #68	; 0x44
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b091      	sub	sp, #68	; 0x44
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b44:	2b21      	cmp	r3, #33	; 0x21
 8004b46:	d160      	bne.n	8004c0a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004b4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004b50:	e057      	b.n	8004c02 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d133      	bne.n	8004bc6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3308      	adds	r3, #8
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b74:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b7e:	633a      	str	r2, [r7, #48]	; 0x30
 8004b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e5      	bne.n	8004b5e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	e853 3f00 	ldrex	r3, [r3]
 8004b9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bb0:	61fb      	str	r3, [r7, #28]
 8004bb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	69b9      	ldr	r1, [r7, #24]
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	e841 2300 	strex	r3, r2, [r1]
 8004bbc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e6      	bne.n	8004b92 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004bc4:	e021      	b.n	8004c0a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d013      	beq.n	8004bfc <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd8:	781a      	ldrb	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004bfc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004c02:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1a4      	bne.n	8004b52 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004c08:	e7ff      	b.n	8004c0a <UART_TxISR_8BIT_FIFOEN+0xd4>
 8004c0a:	bf00      	nop
 8004c0c:	3744      	adds	r7, #68	; 0x44
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b091      	sub	sp, #68	; 0x44
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c24:	2b21      	cmp	r3, #33	; 0x21
 8004c26:	d165      	bne.n	8004cf4 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004c2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004c30:	e05c      	b.n	8004cec <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d133      	bne.n	8004ca6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3308      	adds	r3, #8
 8004c44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c54:	637b      	str	r3, [r7, #52]	; 0x34
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3308      	adds	r3, #8
 8004c5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c66:	e841 2300 	strex	r3, r2, [r1]
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1e5      	bne.n	8004c3e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c86:	633b      	str	r3, [r7, #48]	; 0x30
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	6979      	ldr	r1, [r7, #20]
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e6      	bne.n	8004c72 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8004ca4:	e026      	b.n	8004cf4 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d018      	beq.n	8004ce6 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb8:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cc8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cce:	1c9a      	adds	r2, r3, #2
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004ce6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004cec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d19f      	bne.n	8004c32 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8004cf2:	e7ff      	b.n	8004cf4 <UART_TxISR_16BIT_FIFOEN+0xde>
 8004cf4:	bf00      	nop
 8004cf6:	3744      	adds	r7, #68	; 0x44
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	e853 3f00 	ldrex	r3, [r3]
 8004d14:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d1c:	61fb      	str	r3, [r7, #28]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	461a      	mov	r2, r3
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	61bb      	str	r3, [r7, #24]
 8004d28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	6979      	ldr	r1, [r7, #20]
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	e841 2300 	strex	r3, r2, [r1]
 8004d32:	613b      	str	r3, [r7, #16]
   return(result);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1e6      	bne.n	8004d08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7fe ffc3 	bl	8003cd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d4e:	bf00      	nop
 8004d50:	3720      	adds	r7, #32
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b09c      	sub	sp, #112	; 0x70
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004d66:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d70:	2b22      	cmp	r3, #34	; 0x22
 8004d72:	f040 80be 	bne.w	8004ef2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d80:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004d84:	b2d9      	uxtb	r1, r3
 8004d86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d90:	400a      	ands	r2, r1
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f040 80a1 	bne.w	8004f02 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dd4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dde:	65bb      	str	r3, [r7, #88]	; 0x58
 8004de0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004de4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004de6:	e841 2300 	strex	r3, r2, [r1]
 8004dea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1e6      	bne.n	8004dc0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3308      	adds	r3, #8
 8004df8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e04:	f023 0301 	bic.w	r3, r3, #1
 8004e08:	667b      	str	r3, [r7, #100]	; 0x64
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3308      	adds	r3, #8
 8004e10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e12:	647a      	str	r2, [r7, #68]	; 0x44
 8004e14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e5      	bne.n	8004df2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a33      	ldr	r2, [pc, #204]	; (8004f0c <UART_RxISR_8BIT+0x1b4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d01f      	beq.n	8004e84 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d018      	beq.n	8004e84 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	e853 3f00 	ldrex	r3, [r3]
 8004e5e:	623b      	str	r3, [r7, #32]
   return(result);
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e66:	663b      	str	r3, [r7, #96]	; 0x60
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e70:	633b      	str	r3, [r7, #48]	; 0x30
 8004e72:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e78:	e841 2300 	strex	r3, r2, [r1]
 8004e7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1e6      	bne.n	8004e52 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d12e      	bne.n	8004eea <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	e853 3f00 	ldrex	r3, [r3]
 8004e9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0310 	bic.w	r3, r3, #16
 8004ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	461a      	mov	r2, r3
 8004eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eb0:	61fb      	str	r3, [r7, #28]
 8004eb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb4:	69b9      	ldr	r1, [r7, #24]
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	e841 2300 	strex	r3, r2, [r1]
 8004ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1e6      	bne.n	8004e92 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f003 0310 	and.w	r3, r3, #16
 8004ece:	2b10      	cmp	r3, #16
 8004ed0:	d103      	bne.n	8004eda <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2210      	movs	r2, #16
 8004ed8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fe ff0a 	bl	8003cfc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ee8:	e00b      	b.n	8004f02 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7fb fd26 	bl	800093c <HAL_UART_RxCpltCallback>
}
 8004ef0:	e007      	b.n	8004f02 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699a      	ldr	r2, [r3, #24]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 0208 	orr.w	r2, r2, #8
 8004f00:	619a      	str	r2, [r3, #24]
}
 8004f02:	bf00      	nop
 8004f04:	3770      	adds	r7, #112	; 0x70
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40008000 	.word	0x40008000

08004f10 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b09c      	sub	sp, #112	; 0x70
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004f1e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f28:	2b22      	cmp	r3, #34	; 0x22
 8004f2a:	f040 80be 	bne.w	80050aa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004f3e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004f42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004f46:	4013      	ands	r3, r2
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f52:	1c9a      	adds	r2, r3, #2
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f040 80a1 	bne.w	80050ba <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f80:	e853 3f00 	ldrex	r3, [r3]
 8004f84:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f8c:	667b      	str	r3, [r7, #100]	; 0x64
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f96:	657b      	str	r3, [r7, #84]	; 0x54
 8004f98:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f9e:	e841 2300 	strex	r3, r2, [r1]
 8004fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1e6      	bne.n	8004f78 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3308      	adds	r3, #8
 8004fb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb4:	e853 3f00 	ldrex	r3, [r3]
 8004fb8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	f023 0301 	bic.w	r3, r3, #1
 8004fc0:	663b      	str	r3, [r7, #96]	; 0x60
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fca:	643a      	str	r2, [r7, #64]	; 0x40
 8004fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fd2:	e841 2300 	strex	r3, r2, [r1]
 8004fd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e5      	bne.n	8004faa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a33      	ldr	r2, [pc, #204]	; (80050c4 <UART_RxISR_16BIT+0x1b4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d01f      	beq.n	800503c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d018      	beq.n	800503c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	61fb      	str	r3, [r7, #28]
   return(result);
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800501e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	461a      	mov	r2, r3
 8005026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800502a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800502e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005030:	e841 2300 	strex	r3, r2, [r1]
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e6      	bne.n	800500a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005040:	2b01      	cmp	r3, #1
 8005042:	d12e      	bne.n	80050a2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	e853 3f00 	ldrex	r3, [r3]
 8005056:	60bb      	str	r3, [r7, #8]
   return(result);
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f023 0310 	bic.w	r3, r3, #16
 800505e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506c:	6979      	ldr	r1, [r7, #20]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	e841 2300 	strex	r3, r2, [r1]
 8005074:	613b      	str	r3, [r7, #16]
   return(result);
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1e6      	bne.n	800504a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	2b10      	cmp	r3, #16
 8005088:	d103      	bne.n	8005092 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2210      	movs	r2, #16
 8005090:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005098:	4619      	mov	r1, r3
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fe fe2e 	bl	8003cfc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80050a0:	e00b      	b.n	80050ba <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7fb fc4a 	bl	800093c <HAL_UART_RxCpltCallback>
}
 80050a8:	e007      	b.n	80050ba <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	699a      	ldr	r2, [r3, #24]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f042 0208 	orr.w	r2, r2, #8
 80050b8:	619a      	str	r2, [r3, #24]
}
 80050ba:	bf00      	nop
 80050bc:	3770      	adds	r7, #112	; 0x70
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	40008000 	.word	0x40008000

080050c8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b0ac      	sub	sp, #176	; 0xb0
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80050d6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050fe:	2b22      	cmp	r3, #34	; 0x22
 8005100:	f040 8182 	bne.w	8005408 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800510a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800510e:	e125      	b.n	800535c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800511a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800511e:	b2d9      	uxtb	r1, r3
 8005120:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005124:	b2da      	uxtb	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512a:	400a      	ands	r2, r1
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005134:	1c5a      	adds	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005140:	b29b      	uxth	r3, r3
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	2b00      	cmp	r3, #0
 8005160:	d053      	beq.n	800520a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d011      	beq.n	8005192 <UART_RxISR_8BIT_FIFOEN+0xca>
 800516e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00b      	beq.n	8005192 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2201      	movs	r2, #1
 8005180:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005188:	f043 0201 	orr.w	r2, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d011      	beq.n	80051c2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800519e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00b      	beq.n	80051c2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2202      	movs	r2, #2
 80051b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b8:	f043 0204 	orr.w	r2, r3, #4
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d011      	beq.n	80051f2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80051ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00b      	beq.n	80051f2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2204      	movs	r2, #4
 80051e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e8:	f043 0202 	orr.w	r2, r3, #2
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d006      	beq.n	800520a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7fe fd73 	bl	8003ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	f040 80a2 	bne.w	800535c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8005226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800522c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	461a      	mov	r2, r3
 8005236:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800523a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800523c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005240:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e4      	bne.n	8005218 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3308      	adds	r3, #8
 8005254:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800525e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005264:	f023 0301 	bic.w	r3, r3, #1
 8005268:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3308      	adds	r3, #8
 8005272:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005276:	66ba      	str	r2, [r7, #104]	; 0x68
 8005278:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800527c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005284:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e1      	bne.n	800524e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2220      	movs	r2, #32
 800528e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a5f      	ldr	r2, [pc, #380]	; (8005420 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d021      	beq.n	80052ec <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d01a      	beq.n	80052ec <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80052c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80052d8:	657b      	str	r3, [r7, #84]	; 0x54
 80052da:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80052de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80052e0:	e841 2300 	strex	r3, r2, [r1]
 80052e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e4      	bne.n	80052b6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d130      	bne.n	8005356 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005302:	e853 3f00 	ldrex	r3, [r3]
 8005306:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	f023 0310 	bic.w	r3, r3, #16
 800530e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800531c:	643b      	str	r3, [r7, #64]	; 0x40
 800531e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005320:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005322:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005324:	e841 2300 	strex	r3, r2, [r1]
 8005328:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1e4      	bne.n	80052fa <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	f003 0310 	and.w	r3, r3, #16
 800533a:	2b10      	cmp	r3, #16
 800533c:	d103      	bne.n	8005346 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2210      	movs	r2, #16
 8005344:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800534c:	4619      	mov	r1, r3
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fe fcd4 	bl	8003cfc <HAL_UARTEx_RxEventCallback>
 8005354:	e002      	b.n	800535c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fb faf0 	bl	800093c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800535c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8005360:	2b00      	cmp	r3, #0
 8005362:	d006      	beq.n	8005372 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005364:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b00      	cmp	r3, #0
 800536e:	f47f aecf 	bne.w	8005110 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005378:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800537c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005380:	2b00      	cmp	r3, #0
 8005382:	d049      	beq.n	8005418 <UART_RxISR_8BIT_FIFOEN+0x350>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800538a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800538e:	429a      	cmp	r2, r3
 8005390:	d242      	bcs.n	8005418 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3308      	adds	r3, #8
 8005398:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3308      	adds	r3, #8
 80053b2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80053b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e3      	bne.n	8005392 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a15      	ldr	r2, [pc, #84]	; (8005424 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80053ce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	e853 3f00 	ldrex	r3, [r3]
 80053dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f043 0320 	orr.w	r3, r3, #32
 80053e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	461a      	mov	r2, r3
 80053ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053f2:	61bb      	str	r3, [r7, #24]
 80053f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	6979      	ldr	r1, [r7, #20]
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	e841 2300 	strex	r3, r2, [r1]
 80053fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1e4      	bne.n	80053d0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005406:	e007      	b.n	8005418 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0208 	orr.w	r2, r2, #8
 8005416:	619a      	str	r2, [r3, #24]
}
 8005418:	bf00      	nop
 800541a:	37b0      	adds	r7, #176	; 0xb0
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40008000 	.word	0x40008000
 8005424:	08004d59 	.word	0x08004d59

08005428 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b0ae      	sub	sp, #184	; 0xb8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005436:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800545e:	2b22      	cmp	r3, #34	; 0x22
 8005460:	f040 8186 	bne.w	8005770 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800546a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800546e:	e129      	b.n	80056c4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800547e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005482:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8005486:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800548a:	4013      	ands	r3, r2
 800548c:	b29a      	uxth	r2, r3
 800548e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005492:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005498:	1c9a      	adds	r2, r3, #2
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80054ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80054be:	f003 0307 	and.w	r3, r3, #7
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d053      	beq.n	800556e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d011      	beq.n	80054f6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80054d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00b      	beq.n	80054f6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2201      	movs	r2, #1
 80054e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ec:	f043 0201 	orr.w	r2, r3, #1
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d011      	beq.n	8005526 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005502:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00b      	beq.n	8005526 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2202      	movs	r2, #2
 8005514:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551c:	f043 0204 	orr.w	r2, r3, #4
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005526:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	2b00      	cmp	r3, #0
 8005530:	d011      	beq.n	8005556 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005532:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00b      	beq.n	8005556 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2204      	movs	r2, #4
 8005544:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554c:	f043 0202 	orr.w	r2, r3, #2
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555c:	2b00      	cmp	r3, #0
 800555e:	d006      	beq.n	800556e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7fe fbc1 	bl	8003ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005574:	b29b      	uxth	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	f040 80a4 	bne.w	80056c4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800558a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800558c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005590:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	461a      	mov	r2, r3
 800559a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800559e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055a2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1e2      	bne.n	800557c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3308      	adds	r3, #8
 80055bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055cc:	f023 0301 	bic.w	r3, r3, #1
 80055d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3308      	adds	r3, #8
 80055da:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80055de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e1      	bne.n	80055b6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2220      	movs	r2, #32
 80055f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a5f      	ldr	r2, [pc, #380]	; (8005788 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d021      	beq.n	8005654 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d01a      	beq.n	8005654 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005626:	e853 3f00 	ldrex	r3, [r3]
 800562a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800562c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800562e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005632:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	461a      	mov	r2, r3
 800563c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005640:	65bb      	str	r3, [r7, #88]	; 0x58
 8005642:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005646:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800564e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e4      	bne.n	800561e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005658:	2b01      	cmp	r3, #1
 800565a:	d130      	bne.n	80056be <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	e853 3f00 	ldrex	r3, [r3]
 800566e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005672:	f023 0310 	bic.w	r3, r3, #16
 8005676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005684:	647b      	str	r3, [r7, #68]	; 0x44
 8005686:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800568a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e4      	bne.n	8005662 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	69db      	ldr	r3, [r3, #28]
 800569e:	f003 0310 	and.w	r3, r3, #16
 80056a2:	2b10      	cmp	r3, #16
 80056a4:	d103      	bne.n	80056ae <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2210      	movs	r2, #16
 80056ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7fe fb20 	bl	8003cfc <HAL_UARTEx_RxEventCallback>
 80056bc:	e002      	b.n	80056c4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fb f93c 	bl	800093c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056c4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d006      	beq.n	80056da <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80056cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80056d0:	f003 0320 	and.w	r3, r3, #32
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f47f aecb 	bne.w	8005470 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056e0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80056e4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d049      	beq.n	8005780 <UART_RxISR_16BIT_FIFOEN+0x358>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80056f2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d242      	bcs.n	8005780 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3308      	adds	r3, #8
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	623b      	str	r3, [r7, #32]
   return(result);
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005710:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3308      	adds	r3, #8
 800571a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800571e:	633a      	str	r2, [r7, #48]	; 0x30
 8005720:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800572c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1e3      	bne.n	80056fa <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a15      	ldr	r2, [pc, #84]	; (800578c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005736:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	60fb      	str	r3, [r7, #12]
   return(result);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f043 0320 	orr.w	r3, r3, #32
 800574c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	461a      	mov	r2, r3
 8005756:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800575a:	61fb      	str	r3, [r7, #28]
 800575c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575e:	69b9      	ldr	r1, [r7, #24]
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	617b      	str	r3, [r7, #20]
   return(result);
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e4      	bne.n	8005738 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800576e:	e007      	b.n	8005780 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699a      	ldr	r2, [r3, #24]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0208 	orr.w	r2, r2, #8
 800577e:	619a      	str	r2, [r3, #24]
}
 8005780:	bf00      	nop
 8005782:	37b8      	adds	r7, #184	; 0xb8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40008000 	.word	0x40008000
 800578c:	08004f11 	.word	0x08004f11

08005790 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80057de:	2302      	movs	r3, #2
 80057e0:	e027      	b.n	8005832 <HAL_UARTEx_DisableFifoMode+0x66>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2224      	movs	r2, #36	; 0x24
 80057ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0201 	bic.w	r2, r2, #1
 8005808:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005810:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2220      	movs	r2, #32
 8005824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b084      	sub	sp, #16
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005852:	2302      	movs	r3, #2
 8005854:	e02d      	b.n	80058b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2224      	movs	r2, #36	; 0x24
 8005862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0201 	bic.w	r2, r2, #1
 800587c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f850 	bl	8005938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2220      	movs	r2, #32
 80058a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b084      	sub	sp, #16
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d101      	bne.n	80058d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80058ce:	2302      	movs	r3, #2
 80058d0:	e02d      	b.n	800592e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2224      	movs	r2, #36	; 0x24
 80058de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 0201 	bic.w	r2, r2, #1
 80058f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f812 	bl	8005938 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
	...

08005938 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005944:	2b00      	cmp	r3, #0
 8005946:	d108      	bne.n	800595a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005958:	e031      	b.n	80059be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800595a:	2308      	movs	r3, #8
 800595c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800595e:	2308      	movs	r3, #8
 8005960:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	0e5b      	lsrs	r3, r3, #25
 800596a:	b2db      	uxtb	r3, r3
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	0f5b      	lsrs	r3, r3, #29
 800597a:	b2db      	uxtb	r3, r3
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005982:	7bbb      	ldrb	r3, [r7, #14]
 8005984:	7b3a      	ldrb	r2, [r7, #12]
 8005986:	4911      	ldr	r1, [pc, #68]	; (80059cc <UARTEx_SetNbDataToProcess+0x94>)
 8005988:	5c8a      	ldrb	r2, [r1, r2]
 800598a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800598e:	7b3a      	ldrb	r2, [r7, #12]
 8005990:	490f      	ldr	r1, [pc, #60]	; (80059d0 <UARTEx_SetNbDataToProcess+0x98>)
 8005992:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005994:	fb93 f3f2 	sdiv	r3, r3, r2
 8005998:	b29a      	uxth	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059a0:	7bfb      	ldrb	r3, [r7, #15]
 80059a2:	7b7a      	ldrb	r2, [r7, #13]
 80059a4:	4909      	ldr	r1, [pc, #36]	; (80059cc <UARTEx_SetNbDataToProcess+0x94>)
 80059a6:	5c8a      	ldrb	r2, [r1, r2]
 80059a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80059ac:	7b7a      	ldrb	r2, [r7, #13]
 80059ae:	4908      	ldr	r1, [pc, #32]	; (80059d0 <UARTEx_SetNbDataToProcess+0x98>)
 80059b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80059b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80059be:	bf00      	nop
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	08005a74 	.word	0x08005a74
 80059d0:	08005a7c 	.word	0x08005a7c

080059d4 <memset>:
 80059d4:	4402      	add	r2, r0
 80059d6:	4603      	mov	r3, r0
 80059d8:	4293      	cmp	r3, r2
 80059da:	d100      	bne.n	80059de <memset+0xa>
 80059dc:	4770      	bx	lr
 80059de:	f803 1b01 	strb.w	r1, [r3], #1
 80059e2:	e7f9      	b.n	80059d8 <memset+0x4>

080059e4 <__libc_init_array>:
 80059e4:	b570      	push	{r4, r5, r6, lr}
 80059e6:	4d0d      	ldr	r5, [pc, #52]	; (8005a1c <__libc_init_array+0x38>)
 80059e8:	4c0d      	ldr	r4, [pc, #52]	; (8005a20 <__libc_init_array+0x3c>)
 80059ea:	1b64      	subs	r4, r4, r5
 80059ec:	10a4      	asrs	r4, r4, #2
 80059ee:	2600      	movs	r6, #0
 80059f0:	42a6      	cmp	r6, r4
 80059f2:	d109      	bne.n	8005a08 <__libc_init_array+0x24>
 80059f4:	4d0b      	ldr	r5, [pc, #44]	; (8005a24 <__libc_init_array+0x40>)
 80059f6:	4c0c      	ldr	r4, [pc, #48]	; (8005a28 <__libc_init_array+0x44>)
 80059f8:	f000 f818 	bl	8005a2c <_init>
 80059fc:	1b64      	subs	r4, r4, r5
 80059fe:	10a4      	asrs	r4, r4, #2
 8005a00:	2600      	movs	r6, #0
 8005a02:	42a6      	cmp	r6, r4
 8005a04:	d105      	bne.n	8005a12 <__libc_init_array+0x2e>
 8005a06:	bd70      	pop	{r4, r5, r6, pc}
 8005a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a0c:	4798      	blx	r3
 8005a0e:	3601      	adds	r6, #1
 8005a10:	e7ee      	b.n	80059f0 <__libc_init_array+0xc>
 8005a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a16:	4798      	blx	r3
 8005a18:	3601      	adds	r6, #1
 8005a1a:	e7f2      	b.n	8005a02 <__libc_init_array+0x1e>
 8005a1c:	08005a8c 	.word	0x08005a8c
 8005a20:	08005a8c 	.word	0x08005a8c
 8005a24:	08005a8c 	.word	0x08005a8c
 8005a28:	08005a90 	.word	0x08005a90

08005a2c <_init>:
 8005a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2e:	bf00      	nop
 8005a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a32:	bc08      	pop	{r3}
 8005a34:	469e      	mov	lr, r3
 8005a36:	4770      	bx	lr

08005a38 <_fini>:
 8005a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3a:	bf00      	nop
 8005a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a3e:	bc08      	pop	{r3}
 8005a40:	469e      	mov	lr, r3
 8005a42:	4770      	bx	lr
